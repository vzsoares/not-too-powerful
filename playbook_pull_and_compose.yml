- hosts: aws_ec2_tasty_water
  become: true

  vars:
    AWS_ACCESS_KEY_ID: '{{ AWS_ACCESS_KEY_ID }}'
    AWS_SECRET_ACCESS_KEY: '{{ AWS_SECRET_ACCESS_KEY }}'
    AWS_REGION: '{{ AWS_REGION }}'
    AWS_ACCOUNT_ID: '{{ AWS_ACCOUNT_ID }}'
    COMPOSE_ITEM: '{{ COMPOSE_ITEM }}'

  tasks:
    - name: Create AWS CLI configuration directory
      file:
        path: /home/ubuntu/.aws
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu
    - name: Create AWS CLI credentials file
      copy:
        content: |
          [default]
          AWS_ACCESS_KEY_ID = {{ AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY = {{ AWS_SECRET_ACCESS_KEY }}
        dest: /home/ubuntu/.aws/credentials
        mode: '0600'
        owner: ubuntu
        group: ubuntu
    - name: Create AWS CLI configuration file
      copy:
        content: |
          [default]
          region = {{ AWS_REGION }}
        dest: /home/ubuntu/.aws/config
        mode: '0600'
        owner: ubuntu
        group: ubuntu

    - name: Ensure Docker service is started
      service:
        name: docker
        state: started

    - name: Docker login
      shell: aws ecr get-login-password --region {{ AWS_REGION }} | docker login --username AWS --password-stdin {{ AWS_ACCOUNT_ID }}.dkr.ecr.{{ AWS_REGION }}.amazonaws.com

    - name: Create env
      shell: |
        [ -e .env ] && rm .env
        touch .env
        echo "PORT={{ PORT }}" >> .env
        echo "CLIENT_TOKEN={{ CLIENT_TOKEN }}" >> .env
        echo "CLIENT_ID={{ CLIENT_ID }}" >> .env
        echo "CLIENT_SECRET={{ CLIENT_SECRET }}" >> .env
        echo "REDIRECT_URI={{ REDIRECT_URI }}" >> .env
        echo "AWS_ACCOUNT_ID={{ AWS_ACCOUNT_ID }}" >> .env
        echo "AWS_REGION={{ AWS_REGION }}" >> .env
        echo "IMAGE_NAME_ROOT={{ IMAGE_NAME_ROOT }}" >> .env
        echo "IMAGE_NAME_ROOT_VERSION={{ IMAGE_NAME_ROOT_VERSION }}" >> .env
        echo "IMAGE_NAME_4000={{ IMAGE_NAME_4000 }}" >> .env

    - name: Copy Docker Compose files
      copy:
        src: ./{{ COMPOSE_ITEM }}
        dest: ./{{ COMPOSE_ITEM }}
      loop:
        - '{{ COMPOSE_ITEM }}'

    - name: Deploy Docker Compose stack
      shell: docker-compose -f {{ COMPOSE_ITEM }} pull && docker-compose -f {{ COMPOSE_ITEM }} up -d

    - name: Clear dangling images
      shell: docker rmi --force  $(docker images -f dangling=true -q)
