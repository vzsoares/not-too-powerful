{
  meta: {
    error: TypeError: source.on is not a function
        at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)
        at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)
        at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)
        at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:92:8)
        at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)
        at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)
        at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)
        at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5),
    level: 'error',
    message: 'uncaughtException: source.on is not a function\n' +
      'TypeError: source.on is not a function\n' +
      '    at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)\n' +
      '    at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)\n' +
      '    at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)\n' +
      '    at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:92:8)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)\n' +
      '    at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)',
    stack: 'TypeError: source.on is not a function\n' +
      '    at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)\n' +
      '    at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)\n' +
      '    at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)\n' +
      '    at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:92:8)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)\n' +
      '    at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)',
    exception: true,
    date: 'Thu Mar 16 2023 22:30:51 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 60472,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 339525632,
        heapTotal: 226791424,
        heapUsed: 199200168,
        external: 5684653,
        arrayBuffers: 4056407
      }
    },
    os: { loadavg: [ 1.79, 1.89, 1.58 ], uptime: 46031.06 },
    trace: [
      {
        column: 10,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js',
        function: 'Function.DelayedStream.create',
        line: 33,
        method: 'create',
        native: false
      },
      {
        column: 37,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js',
        function: 'FormData.CombinedStream.append',
        line: 45,
        method: 'append',
        native: false
      },
      {
        column: 3,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js',
        function: 'FormData.append',
        line: 74,
        method: 'append',
        native: false
      },
      {
        column: 8,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts',
        function: 'postImage',
        line: 92,
        method: null,
        native: false
      },
      {
        column: 20,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js',
        function: 'newFn',
        line: 16,
        method: null,
        native: false
      },
      {
        column: 5,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js',
        function: 'Layer.handle [as handle_request]',
        line: 95,
        method: 'handle [as handle_request]',
        native: false
      },
      {
        column: 13,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js',
        function: 'next',
        line: 144,
        method: null,
        native: false
      },
      {
        column: 3,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js',
        function: 'Route.dispatch',
        line: 114,
        method: 'dispatch',
        native: false
      },
      {
        column: 20,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js',
        function: 'newFn',
        line: 16,
        method: null,
        native: false
      },
      {
        column: 5,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js',
        function: 'Layer.handle [as handle_request]',
        line: 95,
        method: 'handle [as handle_request]',
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:30:51:3051'
}
{
  meta: {
    error: TypeError: source.on is not a function
        at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)
        at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)
        at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)
        at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:92:8)
        at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)
        at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)
        at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)
        at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5),
    level: 'error',
    message: 'uncaughtException: source.on is not a function\n' +
      'TypeError: source.on is not a function\n' +
      '    at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)\n' +
      '    at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)\n' +
      '    at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)\n' +
      '    at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:92:8)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)\n' +
      '    at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)',
    stack: 'TypeError: source.on is not a function\n' +
      '    at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)\n' +
      '    at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)\n' +
      '    at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)\n' +
      '    at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:92:8)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)\n' +
      '    at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)',
    exception: true,
    date: 'Thu Mar 16 2023 22:31:13 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 60611,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 341008384,
        heapTotal: 226004992,
        heapUsed: 201184096,
        external: 5876498,
        arrayBuffers: 4248252
      }
    },
    os: { loadavg: [ 1.57, 1.83, 1.57 ], uptime: 46052.95 },
    trace: [
      {
        column: 10,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js',
        function: 'Function.DelayedStream.create',
        line: 33,
        method: 'create',
        native: false
      },
      {
        column: 37,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js',
        function: 'FormData.CombinedStream.append',
        line: 45,
        method: 'append',
        native: false
      },
      {
        column: 3,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js',
        function: 'FormData.append',
        line: 74,
        method: 'append',
        native: false
      },
      {
        column: 8,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts',
        function: 'postImage',
        line: 92,
        method: null,
        native: false
      },
      {
        column: 20,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js',
        function: 'newFn',
        line: 16,
        method: null,
        native: false
      },
      {
        column: 5,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js',
        function: 'Layer.handle [as handle_request]',
        line: 95,
        method: 'handle [as handle_request]',
        native: false
      },
      {
        column: 13,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js',
        function: 'next',
        line: 144,
        method: null,
        native: false
      },
      {
        column: 3,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js',
        function: 'Route.dispatch',
        line: 114,
        method: 'dispatch',
        native: false
      },
      {
        column: 20,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js',
        function: 'newFn',
        line: 16,
        method: null,
        native: false
      },
      {
        column: 5,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js',
        function: 'Layer.handle [as handle_request]',
        line: 95,
        method: 'handle [as handle_request]',
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:31:13:3113'
}
{
  meta: {
    error: TypeError: source.on is not a function
        at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)
        at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)
        at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)
        at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:94:8)
        at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)
        at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)
        at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)
        at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)
        at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5),
    level: 'error',
    message: 'uncaughtException: source.on is not a function\n' +
      'TypeError: source.on is not a function\n' +
      '    at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)\n' +
      '    at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)\n' +
      '    at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)\n' +
      '    at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:94:8)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)\n' +
      '    at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)',
    stack: 'TypeError: source.on is not a function\n' +
      '    at Function.DelayedStream.create (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js:33:10)\n' +
      '    at FormData.CombinedStream.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js:45:37)\n' +
      '    at FormData.append (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js:74:3)\n' +
      '    at postImage (/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts:94:8)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)\n' +
      '    at next (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:144:13)\n' +
      '    at Route.dispatch (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js:114:3)\n' +
      '    at newFn (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js:16:20)\n' +
      '    at Layer.handle [as handle_request] (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js:95:5)',
    exception: true,
    date: 'Thu Mar 16 2023 22:33:23 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 60951,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 347365376,
        heapTotal: 232296448,
        heapUsed: 183783424,
        external: 5409514,
        arrayBuffers: 3784865
      }
    },
    os: { loadavg: [ 0.88, 1.5, 1.48 ], uptime: 46182.99 },
    trace: [
      {
        column: 10,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/delayed-stream/lib/delayed_stream.js',
        function: 'Function.DelayedStream.create',
        line: 33,
        method: 'create',
        native: false
      },
      {
        column: 37,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/combined-stream/lib/combined_stream.js',
        function: 'FormData.CombinedStream.append',
        line: 45,
        method: 'append',
        native: false
      },
      {
        column: 3,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/form-data/lib/form_data.js',
        function: 'FormData.append',
        line: 74,
        method: 'append',
        native: false
      },
      {
        column: 8,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/controllers/guildsController/index.ts',
        function: 'postImage',
        line: 94,
        method: null,
        native: false
      },
      {
        column: 20,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js',
        function: 'newFn',
        line: 16,
        method: null,
        native: false
      },
      {
        column: 5,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js',
        function: 'Layer.handle [as handle_request]',
        line: 95,
        method: 'handle [as handle_request]',
        native: false
      },
      {
        column: 13,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js',
        function: 'next',
        line: 144,
        method: null,
        native: false
      },
      {
        column: 3,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/route.js',
        function: 'Route.dispatch',
        line: 114,
        method: 'dispatch',
        native: false
      },
      {
        column: 20,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express-async-errors/index.js',
        function: 'newFn',
        line: 16,
        method: null,
        native: false
      },
      {
        column: 5,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/express/lib/router/layer.js',
        function: 'Layer.handle [as handle_request]',
        line: 95,
        method: 'handle [as handle_request]',
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:33:23:3323'
}
{
  meta: {
    error: AxiosError: Request failed with status code 400
        at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)
        at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)
        at IncomingMessage.emit (node:events:525:35)
        at IncomingMessage.emit (node:domain:489:12)
        at endReadableNT (node:internal/streams/readable:1359:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
          authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '61912',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
        data: FormData {
          _overheadLength: 150,
          _valueLength: 61706,
          _valuesToMeasure: [],
          writable: false,
          readable: true,
          dataSize: 0,
          maxDataSize: 2097152,
          pauseStreams: true,
          _released: true,
          _streams: [],
          _currentStream: null,
          _insideLoop: false,
          _pendingNext: false,
          _boundary: '--------------------------965436459410590401577140',
          _events: [Object: null prototype] {
            end: [Function (anonymous)],
            error: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            close: [Function (anonymous)]
          },
          _eventsCount: 3
        }
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '61912',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'discordapp.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'discordapp.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2],
              [Symbol(handle_onclose)]: [Function: done]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 100,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 1459,
          [Symbol(kBytesWritten)]: 62339,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                },
                list: [ 'discordapp.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'discordapp.com',
            noDelay: true,
            servername: 'discordapp.com',
            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: multipart/form-data; boundary=--------------------------965436459410590401577140\r\n' +
          'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
          'User-Agent: axios/1.3.4\r\n' +
          'Content-Length: 61912\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: discordapp.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'discordapp.com:443:::::::::::::::::::::': [
              <ref *2> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'discordapp.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener]
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'discordapp.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: true,
                  destroyed: true,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: true,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: null,
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *2],
                    [Symbol(handle_onclose)]: [Function: done]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 100,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 1459,
                [Symbol(kBytesWritten)]: 62339,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                    authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                    'User-Agent': 'axios/1.3.4',
                    'Content-Length': '61912',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'discordapp.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/channels/1067968693017002047/messages',
                  _defaultAgent: [Circular *3],
                  host: 'discordapp.com',
                  noDelay: true,
                  servername: 'discordapp.com',
                  _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
            },
            list: [ 'discordapp.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/channels/1067968693017002047/messages',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 100,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1459,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 17 Mar 2023 01:34:09 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '22',
            'Connection',
            'close',
            'set-cookie',
            '__dcfduid=d02f4652c46311edbee0026d5ad4141c; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'strict-transport-security',
            'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket',
            '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit',
            '5',
            'x-ratelimit-remaining',
            '4',
            'x-ratelimit-reset',
            '1679016851',
            'x-ratelimit-reset-after',
            '1',
            'Via',
            '1.1 google',
            'Alt-Svc',
            'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'CF-Cache-Status',
            'DYNAMIC',
            'Set-Cookie',
            '__sdcfduid=d02f4652c46311edbee0026d5ad4141c9d9fe9da64bbb0e5499dd56b37d4c48b52b70de5d70633aa47b8b0cf24b108ee; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'Set-Cookie',
            '__cf_bm=46OES7g.zSERoBG4NSj5KFP.tE18ZvjuxMDdLCeMenE-1679016849-0-AbptIgEVf14RXfu5TV0DyzN2zviwP1Rg5X16MsbBqW1glFSApiPK2Qm/cflTjVl/XQ++yMYOrar57btc++4MK4A=; path=/; expires=Fri, 17-Mar-23 02:04:09 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
            'Report-To',
            '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0sR0V3rZD1dksAjO2in6H39g3E0dXHpm2SUUJDxtkCLoRRBlcB4mtCphp%2BIxx9SaOOH1yuMud4tmA7GINiZ17w0O0x63qTtil7P54Gm47ttG1TAMyoEfWH9XnDJmk4OY"}],"group":"cf-nel","max_age":604800}',
            'NEL',
            '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            'Server',
            'cloudflare',
            'CF-RAY',
            '7a917dea8d563559-CNF'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 100,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1459,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 17 Mar 2023 01:34:09 GMT',
            'content-type': 'application/json',
            'content-length': '22',
            connection: 'close',
            'set-cookie': [
              '__dcfduid=d02f4652c46311edbee0026d5ad4141c; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__sdcfduid=d02f4652c46311edbee0026d5ad4141c9d9fe9da64bbb0e5499dd56b37d4c48b52b70de5d70633aa47b8b0cf24b108ee; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__cf_bm=46OES7g.zSERoBG4NSj5KFP.tE18ZvjuxMDdLCeMenE-1679016849-0-AbptIgEVf14RXfu5TV0DyzN2zviwP1Rg5X16MsbBqW1glFSApiPK2Qm/cflTjVl/XQ++yMYOrar57btc++4MK4A=; path=/; expires=Fri, 17-Mar-23 02:04:09 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
            ],
            'strict-transport-security': 'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit': '5',
            'x-ratelimit-remaining': '4',
            'x-ratelimit-reset': '1679016851',
            'x-ratelimit-reset-after': '1',
            via: '1.1 google',
            'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'cf-cache-status': 'DYNAMIC',
            'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0sR0V3rZD1dksAjO2in6H39g3E0dXHpm2SUUJDxtkCLoRRBlcB4mtCphp%2BIxx9SaOOH1yuMud4tmA7GINiZ17w0O0x63qTtil7P54Gm47ttG1TAMyoEfWH9XnDJmk4OY"}],"group":"cf-nel","max_age":604800}',
            nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            server: 'cloudflare',
            'cf-ray': '7a917dea8d563559-CNF'
          },
          [Symbol(kHeadersCount)]: 40,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'discordapp.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/api/channels/1067968693017002047/messages',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [
                      <ref *2> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'discordapp.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener]
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'discordapp.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: true,
                          destroyed: true,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: true,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: null,
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *1],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *2],
                            [Symbol(handle_onclose)]: [Function: done]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *2]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 100,
                        [Symbol(kHandle)]: null,
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 1459,
                        [Symbol(kBytesWritten)]: 62339,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                            'User-Agent': 'axios/1.3.4',
                            'Content-Length': '61912',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'discordapp.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/api/channels/1067968693017002047/messages',
                          _defaultAgent: [Circular *3],
                          host: 'discordapp.com',
                          noDelay: true,
                          servername: 'discordapp.com',
                          _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 61912,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: true,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [
            'Content-Type',
            'multipart/form-data; boundary=--------------------------965436459410590401577140'
          ],
          authorization: [
            'authorization',
            'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
          'content-length': [ 'Content-Length', '61912' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'discordapp.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          date: 'Fri, 17 Mar 2023 01:34:09 GMT',
          'content-type': 'application/json',
          'content-length': '22',
          connection: 'close',
          'set-cookie': [
            '__dcfduid=d02f4652c46311edbee0026d5ad4141c; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__sdcfduid=d02f4652c46311edbee0026d5ad4141c9d9fe9da64bbb0e5499dd56b37d4c48b52b70de5d70633aa47b8b0cf24b108ee; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__cf_bm=46OES7g.zSERoBG4NSj5KFP.tE18ZvjuxMDdLCeMenE-1679016849-0-AbptIgEVf14RXfu5TV0DyzN2zviwP1Rg5X16MsbBqW1glFSApiPK2Qm/cflTjVl/XQ++yMYOrar57btc++4MK4A=; path=/; expires=Fri, 17-Mar-23 02:04:09 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
          ],
          'strict-transport-security': 'max-age=31536000; includeSubDomains',
          'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
          'x-ratelimit-limit': '5',
          'x-ratelimit-remaining': '4',
          'x-ratelimit-reset': '1679016851',
          'x-ratelimit-reset-after': '1',
          via: '1.1 google',
          'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
          'cf-cache-status': 'DYNAMIC',
          'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0sR0V3rZD1dksAjO2in6H39g3E0dXHpm2SUUJDxtkCLoRRBlcB4mtCphp%2BIxx9SaOOH1yuMud4tmA7GINiZ17w0O0x63qTtil7P54Gm47ttG1TAMyoEfWH9XnDJmk4OY"}],"group":"cf-nel","max_age":604800}',
          nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
          server: 'cloudflare',
          'cf-ray': '7a917dea8d563559-CNF'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
            'User-Agent': 'axios/1.3.4',
            'Content-Length': '61912',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'post',
          url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          data: FormData {
            _overheadLength: 150,
            _valueLength: 61706,
            _valuesToMeasure: [],
            writable: false,
            readable: true,
            dataSize: 0,
            maxDataSize: 2097152,
            pauseStreams: true,
            _released: true,
            _streams: [],
            _currentStream: null,
            _insideLoop: false,
            _pendingNext: false,
            _boundary: '--------------------------965436459410590401577140',
            _events: [Object: null prototype] {
              end: [Function (anonymous)],
              error: [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              close: [Function (anonymous)]
            },
            _eventsCount: 3
          }
        },
        request: <ref *1> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '61912',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 100,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1459,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: multipart/form-data; boundary=--------------------------965436459410590401577140\r\n' +
            'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
            'User-Agent: axios/1.3.4\r\n' +
            'Content-Length: 61912\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: discordapp.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'discordapp.com:443:::::::::::::::::::::': [
                <ref *2> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'discordapp.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener]
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'discordapp.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: true,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: true,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *1],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *2],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *2]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 100,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 1459,
                  [Symbol(kBytesWritten)]: 62339,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                      authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                      'User-Agent': 'axios/1.3.4',
                      'Content-Length': '61912',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'discordapp.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *3],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/channels/1067968693017002047/messages',
                    _defaultAgent: [Circular *3],
                    host: 'discordapp.com',
                    noDelay: true,
                    servername: 'discordapp.com',
                    _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
              },
              list: [ 'discordapp.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/api/channels/1067968693017002047/messages',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              constructed: true,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: true,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: handleStreamEnd]
              ],
              error: [Function: handleStreamError],
              data: [Function: handleStreamData],
              aborted: [Function: handlerStreamAborted]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 100,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1459,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Date',
              'Fri, 17 Mar 2023 01:34:09 GMT',
              'Content-Type',
              'application/json',
              'Content-Length',
              '22',
              'Connection',
              'close',
              'set-cookie',
              '__dcfduid=d02f4652c46311edbee0026d5ad4141c; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'strict-transport-security',
              'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket',
              '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit',
              '5',
              'x-ratelimit-remaining',
              '4',
              'x-ratelimit-reset',
              '1679016851',
              'x-ratelimit-reset-after',
              '1',
              'Via',
              '1.1 google',
              'Alt-Svc',
              'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'CF-Cache-Status',
              'DYNAMIC',
              'Set-Cookie',
              '__sdcfduid=d02f4652c46311edbee0026d5ad4141c9d9fe9da64bbb0e5499dd56b37d4c48b52b70de5d70633aa47b8b0cf24b108ee; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'Set-Cookie',
              '__cf_bm=46OES7g.zSERoBG4NSj5KFP.tE18ZvjuxMDdLCeMenE-1679016849-0-AbptIgEVf14RXfu5TV0DyzN2zviwP1Rg5X16MsbBqW1glFSApiPK2Qm/cflTjVl/XQ++yMYOrar57btc++4MK4A=; path=/; expires=Fri, 17-Mar-23 02:04:09 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
              'Report-To',
              '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0sR0V3rZD1dksAjO2in6H39g3E0dXHpm2SUUJDxtkCLoRRBlcB4mtCphp%2BIxx9SaOOH1yuMud4tmA7GINiZ17w0O0x63qTtil7P54Gm47ttG1TAMyoEfWH9XnDJmk4OY"}],"group":"cf-nel","max_age":604800}',
              'NEL',
              '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              'Server',
              'cloudflare',
              'CF-RAY',
              '7a917dea8d563559-CNF'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 100,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1459,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            _consuming: false,
            _dumped: false,
            req: [Circular *1],
            responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              date: 'Fri, 17 Mar 2023 01:34:09 GMT',
              'content-type': 'application/json',
              'content-length': '22',
              connection: 'close',
              'set-cookie': [
                '__dcfduid=d02f4652c46311edbee0026d5ad4141c; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__sdcfduid=d02f4652c46311edbee0026d5ad4141c9d9fe9da64bbb0e5499dd56b37d4c48b52b70de5d70633aa47b8b0cf24b108ee; Expires=Wed, 15-Mar-2028 01:34:09 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__cf_bm=46OES7g.zSERoBG4NSj5KFP.tE18ZvjuxMDdLCeMenE-1679016849-0-AbptIgEVf14RXfu5TV0DyzN2zviwP1Rg5X16MsbBqW1glFSApiPK2Qm/cflTjVl/XQ++yMYOrar57btc++4MK4A=; path=/; expires=Fri, 17-Mar-23 02:04:09 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
              ],
              'strict-transport-security': 'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit': '5',
              'x-ratelimit-remaining': '4',
              'x-ratelimit-reset': '1679016851',
              'x-ratelimit-reset-after': '1',
              via: '1.1 google',
              'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'cf-cache-status': 'DYNAMIC',
              'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=0sR0V3rZD1dksAjO2in6H39g3E0dXHpm2SUUJDxtkCLoRRBlcB4mtCphp%2BIxx9SaOOH1yuMud4tmA7GINiZ17w0O0x63qTtil7P54Gm47ttG1TAMyoEfWH9XnDJmk4OY"}],"group":"cf-nel","max_age":604800}',
              nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              server: 'cloudflare',
              'cf-ray': '7a917dea8d563559-CNF'
            },
            [Symbol(kHeadersCount)]: 40,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'discordapp.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/api/channels/1067968693017002047/messages',
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [
                        <ref *2> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: undefined,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'discordapp.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose],
                              [Function: socketCloseListener]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: socketErrorListener]
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'discordapp.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            constructed: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: true,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: false
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: true,
                            destroyed: true,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: true,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: null,
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          parser: null,
                          _httpMessage: [Circular *1],
                          [Symbol(res)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *2],
                              [Symbol(handle_onclose)]: [Function: done]
                            },
                            _parentWrap: undefined,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *2]
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: 100,
                          [Symbol(kHandle)]: null,
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 60,
                          [Symbol(kBytesRead)]: 1459,
                          [Symbol(kBytesWritten)]: 62339,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'POST',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'Content-Type': 'multipart/form-data; boundary=--------------------------965436459410590401577140',
                              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                              'User-Agent': 'axios/1.3.4',
                              'Content-Length': '61912',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'discordapp.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *4],
                            pathname: '/api/channels/1067968693017002047/messages',
                            _defaultAgent: [Circular *3],
                            host: 'discordapp.com',
                            noDelay: true,
                            servername: 'discordapp.com',
                            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                            encoding: null,
                            singleUse: true
                          }
                        }
                      ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 57 ba d8 22 36 12 99 4d c7 31 5c 3f 9d 26 ab 3a 11 fb 31 e4 ef bd 7a f4 23 d7 c4 8e ad 60 0c 36 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 61912,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *1],
            _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kEndCalled)]: true,
          [Symbol(kNeedDrain)]: true,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [
              'Content-Type',
              'multipart/form-data; boundary=--------------------------965436459410590401577140'
            ],
            authorization: [
              'authorization',
              'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
            ],
            'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
            'content-length': [ 'Content-Length', '61912' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'discordapp.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kUniqueHeaders)]: null
        },
        data: { attachments: [ '0' ] }
      }
    },
    level: 'error',
    message: 'uncaughtException: Request failed with status code 400\n' +
      'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    stack: 'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    exception: true,
    date: 'Thu Mar 16 2023 22:34:09 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 61075,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 347459584,
        heapTotal: 232013824,
        heapUsed: 187460384,
        external: 6774276,
        arrayBuffers: 4033993
      }
    },
    os: { loadavg: [ 0.75, 1.39, 1.45 ], uptime: 46229.12 },
    trace: [
      {
        column: 12,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js',
        function: 'settle',
        line: 19,
        method: null,
        native: false
      },
      {
        column: 11,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js',
        function: 'IncomingMessage.handleStreamEnd',
        line: 556,
        method: 'handleStreamEnd',
        native: false
      },
      {
        column: 35,
        file: 'node:events',
        function: 'IncomingMessage.emit',
        line: 525,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:domain',
        function: 'IncomingMessage.emit',
        line: 489,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:internal/streams/readable',
        function: 'endReadableNT',
        line: 1359,
        method: null,
        native: false
      },
      {
        column: 21,
        file: 'node:internal/process/task_queues',
        function: 'processTicksAndRejections',
        line: 82,
        method: null,
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:34:09:349'
}
{
  meta: {
    error: AxiosError: Request failed with status code 400
        at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)
        at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)
        at IncomingMessage.emit (node:events:525:35)
        at IncomingMessage.emit (node:domain:489:12)
        at endReadableNT (node:internal/streams/readable:1359:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
          authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '61912',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
        data: FormData {
          _overheadLength: 150,
          _valueLength: 61706,
          _valuesToMeasure: [],
          writable: false,
          readable: true,
          dataSize: 0,
          maxDataSize: 2097152,
          pauseStreams: true,
          _released: true,
          _streams: [],
          _currentStream: null,
          _insideLoop: false,
          _pendingNext: false,
          _boundary: '--------------------------926436937612086524630297',
          _events: [Object: null prototype] {
            end: [Function (anonymous)],
            error: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            close: [Function (anonymous)]
          },
          _eventsCount: 3
        }
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '61912',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'discordapp.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'discordapp.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2],
              [Symbol(handle_onclose)]: [Function: done]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 104,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 1465,
          [Symbol(kBytesWritten)]: 62339,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                },
                list: [ 'discordapp.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'discordapp.com',
            noDelay: true,
            servername: 'discordapp.com',
            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: multipart/form-data; boundary=--------------------------926436937612086524630297\r\n' +
          'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
          'User-Agent: axios/1.3.4\r\n' +
          'Content-Length: 61912\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: discordapp.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'discordapp.com:443:::::::::::::::::::::': [
              <ref *2> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'discordapp.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener]
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'discordapp.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: true,
                  destroyed: true,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: true,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: null,
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *2],
                    [Symbol(handle_onclose)]: [Function: done]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 104,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 1465,
                [Symbol(kBytesWritten)]: 62339,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                    authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                    'User-Agent': 'axios/1.3.4',
                    'Content-Length': '61912',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'discordapp.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/channels/1067968693017002047/messages',
                  _defaultAgent: [Circular *3],
                  host: 'discordapp.com',
                  noDelay: true,
                  servername: 'discordapp.com',
                  _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
            },
            list: [ 'discordapp.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/channels/1067968693017002047/messages',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 104,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 17 Mar 2023 01:37:53 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '22',
            'Connection',
            'close',
            'set-cookie',
            '__dcfduid=55e70898c46411ed93eac216f4134aaa; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'strict-transport-security',
            'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket',
            '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit',
            '5',
            'x-ratelimit-remaining',
            '4',
            'x-ratelimit-reset',
            '1679017075',
            'x-ratelimit-reset-after',
            '1',
            'Via',
            '1.1 google',
            'Alt-Svc',
            'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'CF-Cache-Status',
            'DYNAMIC',
            'Set-Cookie',
            '__sdcfduid=55e70898c46411ed93eac216f4134aaa9dd421b70c4dbddd53845484de750b6fb324f51f1080e9aeeabc610055d0b205; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'Set-Cookie',
            '__cf_bm=LMqkOIOwZMRyj9Av9iLnSC9JzGWkxDSj.Ih48X1TM5s-1679017073-0-AYvBv2aQwg10d1q4ntPvSr7/frCa4Yq43Jr69pDBEDI1NZNB6y7tbhN1pJ0VyBP4PiqnrWRYjoMLVvWfuvBXpqQ=; path=/; expires=Fri, 17-Mar-23 02:07:53 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
            'Report-To',
            '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=i5tigW05xRdCZ1h0BEBGlILHYMZe1zHdfvn5rdANGEnSIH6Uiq%2FalzVEuz0wM6%2FIrGVNQqRrgVZcLwxA9zUm4iFU%2Bu3t8Yqm7d531BQPo1UZsi%2B3iSFW2WnFzvL1rHJQ"}],"group":"cf-nel","max_age":604800}',
            'NEL',
            '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            'Server',
            'cloudflare',
            'CF-RAY',
            '7a9183643cd13571-CNF'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 104,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 17 Mar 2023 01:37:53 GMT',
            'content-type': 'application/json',
            'content-length': '22',
            connection: 'close',
            'set-cookie': [
              '__dcfduid=55e70898c46411ed93eac216f4134aaa; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__sdcfduid=55e70898c46411ed93eac216f4134aaa9dd421b70c4dbddd53845484de750b6fb324f51f1080e9aeeabc610055d0b205; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__cf_bm=LMqkOIOwZMRyj9Av9iLnSC9JzGWkxDSj.Ih48X1TM5s-1679017073-0-AYvBv2aQwg10d1q4ntPvSr7/frCa4Yq43Jr69pDBEDI1NZNB6y7tbhN1pJ0VyBP4PiqnrWRYjoMLVvWfuvBXpqQ=; path=/; expires=Fri, 17-Mar-23 02:07:53 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
            ],
            'strict-transport-security': 'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit': '5',
            'x-ratelimit-remaining': '4',
            'x-ratelimit-reset': '1679017075',
            'x-ratelimit-reset-after': '1',
            via: '1.1 google',
            'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'cf-cache-status': 'DYNAMIC',
            'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=i5tigW05xRdCZ1h0BEBGlILHYMZe1zHdfvn5rdANGEnSIH6Uiq%2FalzVEuz0wM6%2FIrGVNQqRrgVZcLwxA9zUm4iFU%2Bu3t8Yqm7d531BQPo1UZsi%2B3iSFW2WnFzvL1rHJQ"}],"group":"cf-nel","max_age":604800}',
            nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            server: 'cloudflare',
            'cf-ray': '7a9183643cd13571-CNF'
          },
          [Symbol(kHeadersCount)]: 40,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'discordapp.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/api/channels/1067968693017002047/messages',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [
                      <ref *2> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'discordapp.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener]
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'discordapp.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: true,
                          destroyed: true,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: true,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: null,
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *1],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *2],
                            [Symbol(handle_onclose)]: [Function: done]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *2]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 104,
                        [Symbol(kHandle)]: null,
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 1465,
                        [Symbol(kBytesWritten)]: 62339,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                            'User-Agent': 'axios/1.3.4',
                            'Content-Length': '61912',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'discordapp.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/api/channels/1067968693017002047/messages',
                          _defaultAgent: [Circular *3],
                          host: 'discordapp.com',
                          noDelay: true,
                          servername: 'discordapp.com',
                          _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 61912,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: true,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [
            'Content-Type',
            'multipart/form-data; boundary=--------------------------926436937612086524630297'
          ],
          authorization: [
            'authorization',
            'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
          'content-length': [ 'Content-Length', '61912' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'discordapp.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          date: 'Fri, 17 Mar 2023 01:37:53 GMT',
          'content-type': 'application/json',
          'content-length': '22',
          connection: 'close',
          'set-cookie': [
            '__dcfduid=55e70898c46411ed93eac216f4134aaa; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__sdcfduid=55e70898c46411ed93eac216f4134aaa9dd421b70c4dbddd53845484de750b6fb324f51f1080e9aeeabc610055d0b205; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__cf_bm=LMqkOIOwZMRyj9Av9iLnSC9JzGWkxDSj.Ih48X1TM5s-1679017073-0-AYvBv2aQwg10d1q4ntPvSr7/frCa4Yq43Jr69pDBEDI1NZNB6y7tbhN1pJ0VyBP4PiqnrWRYjoMLVvWfuvBXpqQ=; path=/; expires=Fri, 17-Mar-23 02:07:53 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
          ],
          'strict-transport-security': 'max-age=31536000; includeSubDomains',
          'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
          'x-ratelimit-limit': '5',
          'x-ratelimit-remaining': '4',
          'x-ratelimit-reset': '1679017075',
          'x-ratelimit-reset-after': '1',
          via: '1.1 google',
          'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
          'cf-cache-status': 'DYNAMIC',
          'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=i5tigW05xRdCZ1h0BEBGlILHYMZe1zHdfvn5rdANGEnSIH6Uiq%2FalzVEuz0wM6%2FIrGVNQqRrgVZcLwxA9zUm4iFU%2Bu3t8Yqm7d531BQPo1UZsi%2B3iSFW2WnFzvL1rHJQ"}],"group":"cf-nel","max_age":604800}',
          nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
          server: 'cloudflare',
          'cf-ray': '7a9183643cd13571-CNF'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
            'User-Agent': 'axios/1.3.4',
            'Content-Length': '61912',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'post',
          url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          data: FormData {
            _overheadLength: 150,
            _valueLength: 61706,
            _valuesToMeasure: [],
            writable: false,
            readable: true,
            dataSize: 0,
            maxDataSize: 2097152,
            pauseStreams: true,
            _released: true,
            _streams: [],
            _currentStream: null,
            _insideLoop: false,
            _pendingNext: false,
            _boundary: '--------------------------926436937612086524630297',
            _events: [Object: null prototype] {
              end: [Function (anonymous)],
              error: [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              close: [Function (anonymous)]
            },
            _eventsCount: 3
          }
        },
        request: <ref *1> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '61912',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 104,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: multipart/form-data; boundary=--------------------------926436937612086524630297\r\n' +
            'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
            'User-Agent: axios/1.3.4\r\n' +
            'Content-Length: 61912\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: discordapp.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'discordapp.com:443:::::::::::::::::::::': [
                <ref *2> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'discordapp.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener]
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'discordapp.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: true,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: true,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *1],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *2],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *2]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 104,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 1465,
                  [Symbol(kBytesWritten)]: 62339,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                      authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                      'User-Agent': 'axios/1.3.4',
                      'Content-Length': '61912',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'discordapp.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *3],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/channels/1067968693017002047/messages',
                    _defaultAgent: [Circular *3],
                    host: 'discordapp.com',
                    noDelay: true,
                    servername: 'discordapp.com',
                    _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
              },
              list: [ 'discordapp.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/api/channels/1067968693017002047/messages',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              constructed: true,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: true,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: handleStreamEnd]
              ],
              error: [Function: handleStreamError],
              data: [Function: handleStreamData],
              aborted: [Function: handlerStreamAborted]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 104,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1465,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Date',
              'Fri, 17 Mar 2023 01:37:53 GMT',
              'Content-Type',
              'application/json',
              'Content-Length',
              '22',
              'Connection',
              'close',
              'set-cookie',
              '__dcfduid=55e70898c46411ed93eac216f4134aaa; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'strict-transport-security',
              'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket',
              '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit',
              '5',
              'x-ratelimit-remaining',
              '4',
              'x-ratelimit-reset',
              '1679017075',
              'x-ratelimit-reset-after',
              '1',
              'Via',
              '1.1 google',
              'Alt-Svc',
              'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'CF-Cache-Status',
              'DYNAMIC',
              'Set-Cookie',
              '__sdcfduid=55e70898c46411ed93eac216f4134aaa9dd421b70c4dbddd53845484de750b6fb324f51f1080e9aeeabc610055d0b205; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'Set-Cookie',
              '__cf_bm=LMqkOIOwZMRyj9Av9iLnSC9JzGWkxDSj.Ih48X1TM5s-1679017073-0-AYvBv2aQwg10d1q4ntPvSr7/frCa4Yq43Jr69pDBEDI1NZNB6y7tbhN1pJ0VyBP4PiqnrWRYjoMLVvWfuvBXpqQ=; path=/; expires=Fri, 17-Mar-23 02:07:53 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
              'Report-To',
              '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=i5tigW05xRdCZ1h0BEBGlILHYMZe1zHdfvn5rdANGEnSIH6Uiq%2FalzVEuz0wM6%2FIrGVNQqRrgVZcLwxA9zUm4iFU%2Bu3t8Yqm7d531BQPo1UZsi%2B3iSFW2WnFzvL1rHJQ"}],"group":"cf-nel","max_age":604800}',
              'NEL',
              '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              'Server',
              'cloudflare',
              'CF-RAY',
              '7a9183643cd13571-CNF'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 104,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1465,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            _consuming: false,
            _dumped: false,
            req: [Circular *1],
            responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              date: 'Fri, 17 Mar 2023 01:37:53 GMT',
              'content-type': 'application/json',
              'content-length': '22',
              connection: 'close',
              'set-cookie': [
                '__dcfduid=55e70898c46411ed93eac216f4134aaa; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__sdcfduid=55e70898c46411ed93eac216f4134aaa9dd421b70c4dbddd53845484de750b6fb324f51f1080e9aeeabc610055d0b205; Expires=Wed, 15-Mar-2028 01:37:53 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__cf_bm=LMqkOIOwZMRyj9Av9iLnSC9JzGWkxDSj.Ih48X1TM5s-1679017073-0-AYvBv2aQwg10d1q4ntPvSr7/frCa4Yq43Jr69pDBEDI1NZNB6y7tbhN1pJ0VyBP4PiqnrWRYjoMLVvWfuvBXpqQ=; path=/; expires=Fri, 17-Mar-23 02:07:53 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
              ],
              'strict-transport-security': 'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit': '5',
              'x-ratelimit-remaining': '4',
              'x-ratelimit-reset': '1679017075',
              'x-ratelimit-reset-after': '1',
              via: '1.1 google',
              'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'cf-cache-status': 'DYNAMIC',
              'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=i5tigW05xRdCZ1h0BEBGlILHYMZe1zHdfvn5rdANGEnSIH6Uiq%2FalzVEuz0wM6%2FIrGVNQqRrgVZcLwxA9zUm4iFU%2Bu3t8Yqm7d531BQPo1UZsi%2B3iSFW2WnFzvL1rHJQ"}],"group":"cf-nel","max_age":604800}',
              nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              server: 'cloudflare',
              'cf-ray': '7a9183643cd13571-CNF'
            },
            [Symbol(kHeadersCount)]: 40,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'discordapp.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/api/channels/1067968693017002047/messages',
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [
                        <ref *2> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: undefined,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'discordapp.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose],
                              [Function: socketCloseListener]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: socketErrorListener]
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'discordapp.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            constructed: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: true,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: false
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: true,
                            destroyed: true,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: true,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: null,
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          parser: null,
                          _httpMessage: [Circular *1],
                          [Symbol(res)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *2],
                              [Symbol(handle_onclose)]: [Function: done]
                            },
                            _parentWrap: undefined,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *2]
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: 104,
                          [Symbol(kHandle)]: null,
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 60,
                          [Symbol(kBytesRead)]: 1465,
                          [Symbol(kBytesWritten)]: 62339,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'POST',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'Content-Type': 'multipart/form-data; boundary=--------------------------926436937612086524630297',
                              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                              'User-Agent': 'axios/1.3.4',
                              'Content-Length': '61912',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'discordapp.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *4],
                            pathname: '/api/channels/1067968693017002047/messages',
                            _defaultAgent: [Circular *3],
                            host: 'discordapp.com',
                            noDelay: true,
                            servername: 'discordapp.com',
                            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                            encoding: null,
                            singleUse: true
                          }
                        }
                      ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 0f e4 e5 1b 69 50 71 c6 60 a9 96 84 88 d4 f8 04 4f 66 0f 2a 87 24 58 22 bf d1 50 53 bd c2 88 0c 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 61912,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *1],
            _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kEndCalled)]: true,
          [Symbol(kNeedDrain)]: true,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [
              'Content-Type',
              'multipart/form-data; boundary=--------------------------926436937612086524630297'
            ],
            authorization: [
              'authorization',
              'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
            ],
            'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
            'content-length': [ 'Content-Length', '61912' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'discordapp.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kUniqueHeaders)]: null
        },
        data: { attachments: [ '0' ] }
      }
    },
    level: 'error',
    message: 'uncaughtException: Request failed with status code 400\n' +
      'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    stack: 'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    exception: true,
    date: 'Thu Mar 16 2023 22:37:53 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 61469,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 345100288,
        heapTotal: 228081664,
        heapUsed: 205772328,
        external: 7387851,
        arrayBuffers: 4643971
      }
    },
    os: { loadavg: [ 1.2, 1.33, 1.41 ], uptime: 46453.46 },
    trace: [
      {
        column: 12,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js',
        function: 'settle',
        line: 19,
        method: null,
        native: false
      },
      {
        column: 11,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js',
        function: 'IncomingMessage.handleStreamEnd',
        line: 556,
        method: 'handleStreamEnd',
        native: false
      },
      {
        column: 35,
        file: 'node:events',
        function: 'IncomingMessage.emit',
        line: 525,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:domain',
        function: 'IncomingMessage.emit',
        line: 489,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:internal/streams/readable',
        function: 'endReadableNT',
        line: 1359,
        method: null,
        native: false
      },
      {
        column: 21,
        file: 'node:internal/process/task_queues',
        function: 'processTicksAndRejections',
        line: 82,
        method: null,
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:37:53:3753'
}
{
  meta: {
    error: AxiosError: Request failed with status code 400
        at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)
        at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)
        at IncomingMessage.emit (node:events:525:35)
        at IncomingMessage.emit (node:domain:489:12)
        at endReadableNT (node:internal/streams/readable:1359:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
          authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '61912',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
        data: FormData {
          _overheadLength: 150,
          _valueLength: 61706,
          _valuesToMeasure: [],
          writable: false,
          readable: true,
          dataSize: 0,
          maxDataSize: 2097152,
          pauseStreams: true,
          _released: true,
          _streams: [],
          _currentStream: null,
          _insideLoop: false,
          _pendingNext: false,
          _boundary: '--------------------------406826187559853176758822',
          _events: [Object: null prototype] {
            end: [Function (anonymous)],
            error: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            close: [Function (anonymous)]
          },
          _eventsCount: 3
        }
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '61912',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'discordapp.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'discordapp.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2],
              [Symbol(handle_onclose)]: [Function: done]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 104,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 1465,
          [Symbol(kBytesWritten)]: 62339,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                },
                list: [ 'discordapp.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'discordapp.com',
            noDelay: true,
            servername: 'discordapp.com',
            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: multipart/form-data; boundary=--------------------------406826187559853176758822\r\n' +
          'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
          'User-Agent: axios/1.3.4\r\n' +
          'Content-Length: 61912\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: discordapp.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'discordapp.com:443:::::::::::::::::::::': [
              <ref *2> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'discordapp.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener]
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'discordapp.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: true,
                  destroyed: true,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: true,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: null,
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *2],
                    [Symbol(handle_onclose)]: [Function: done]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 104,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 1465,
                [Symbol(kBytesWritten)]: 62339,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                    authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                    'User-Agent': 'axios/1.3.4',
                    'Content-Length': '61912',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'discordapp.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/channels/1067968693017002047/messages',
                  _defaultAgent: [Circular *3],
                  host: 'discordapp.com',
                  noDelay: true,
                  servername: 'discordapp.com',
                  _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
            },
            list: [ 'discordapp.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/channels/1067968693017002047/messages',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 104,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 17 Mar 2023 01:38:18 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '22',
            'Connection',
            'close',
            'set-cookie',
            '__dcfduid=64ced6ecc46411ed973d66bcffee43da; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'strict-transport-security',
            'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket',
            '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit',
            '5',
            'x-ratelimit-remaining',
            '4',
            'x-ratelimit-reset',
            '1679017100',
            'x-ratelimit-reset-after',
            '1',
            'Via',
            '1.1 google',
            'Alt-Svc',
            'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'CF-Cache-Status',
            'DYNAMIC',
            'Set-Cookie',
            '__sdcfduid=64ced6ecc46411ed973d66bcffee43dae86a460155206f8e4686af6e52fcb5d184eaa0ef80e04ef41f55300f84d2d718; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'Set-Cookie',
            '__cf_bm=lsQPPEtFwq7ULXHj89txlptaheg6OBZ6VkmhqOWo5FM-1679017098-0-AUV7IBFrYKIL9qno1Lb/4QROmLXNVrfcKq9qF0yAJZDiFPLpxOBI+3GVwc9ElmHUqTyIqJtwSGWDQDBIPnHn/EA=; path=/; expires=Fri, 17-Mar-23 02:08:18 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
            'Report-To',
            '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ZAPOx1dwKpEGdDjbmqHY%2FuzNY8PIiIskmzKL6uoGpvlaPYVRhWYP7qfqw0fmQg3MUvWOe5TQrSWTy0JEWzs0DaZnZqnm2opO%2BZr1DW4l%2FMr2V8kb6EIrCs51Mlab%2FV6H"}],"group":"cf-nel","max_age":604800}',
            'NEL',
            '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            'Server',
            'cloudflare',
            'CF-RAY',
            '7a9184007cb53553-CNF'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 104,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 17 Mar 2023 01:38:18 GMT',
            'content-type': 'application/json',
            'content-length': '22',
            connection: 'close',
            'set-cookie': [
              '__dcfduid=64ced6ecc46411ed973d66bcffee43da; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__sdcfduid=64ced6ecc46411ed973d66bcffee43dae86a460155206f8e4686af6e52fcb5d184eaa0ef80e04ef41f55300f84d2d718; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__cf_bm=lsQPPEtFwq7ULXHj89txlptaheg6OBZ6VkmhqOWo5FM-1679017098-0-AUV7IBFrYKIL9qno1Lb/4QROmLXNVrfcKq9qF0yAJZDiFPLpxOBI+3GVwc9ElmHUqTyIqJtwSGWDQDBIPnHn/EA=; path=/; expires=Fri, 17-Mar-23 02:08:18 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
            ],
            'strict-transport-security': 'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit': '5',
            'x-ratelimit-remaining': '4',
            'x-ratelimit-reset': '1679017100',
            'x-ratelimit-reset-after': '1',
            via: '1.1 google',
            'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'cf-cache-status': 'DYNAMIC',
            'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ZAPOx1dwKpEGdDjbmqHY%2FuzNY8PIiIskmzKL6uoGpvlaPYVRhWYP7qfqw0fmQg3MUvWOe5TQrSWTy0JEWzs0DaZnZqnm2opO%2BZr1DW4l%2FMr2V8kb6EIrCs51Mlab%2FV6H"}],"group":"cf-nel","max_age":604800}',
            nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            server: 'cloudflare',
            'cf-ray': '7a9184007cb53553-CNF'
          },
          [Symbol(kHeadersCount)]: 40,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'discordapp.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/api/channels/1067968693017002047/messages',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [
                      <ref *2> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'discordapp.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener]
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'discordapp.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: true,
                          destroyed: true,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: true,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: null,
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *1],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *2],
                            [Symbol(handle_onclose)]: [Function: done]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *2]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 104,
                        [Symbol(kHandle)]: null,
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 1465,
                        [Symbol(kBytesWritten)]: 62339,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                            'User-Agent': 'axios/1.3.4',
                            'Content-Length': '61912',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'discordapp.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/api/channels/1067968693017002047/messages',
                          _defaultAgent: [Circular *3],
                          host: 'discordapp.com',
                          noDelay: true,
                          servername: 'discordapp.com',
                          _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 61912,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: true,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [
            'Content-Type',
            'multipart/form-data; boundary=--------------------------406826187559853176758822'
          ],
          authorization: [
            'authorization',
            'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
          'content-length': [ 'Content-Length', '61912' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'discordapp.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          date: 'Fri, 17 Mar 2023 01:38:18 GMT',
          'content-type': 'application/json',
          'content-length': '22',
          connection: 'close',
          'set-cookie': [
            '__dcfduid=64ced6ecc46411ed973d66bcffee43da; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__sdcfduid=64ced6ecc46411ed973d66bcffee43dae86a460155206f8e4686af6e52fcb5d184eaa0ef80e04ef41f55300f84d2d718; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__cf_bm=lsQPPEtFwq7ULXHj89txlptaheg6OBZ6VkmhqOWo5FM-1679017098-0-AUV7IBFrYKIL9qno1Lb/4QROmLXNVrfcKq9qF0yAJZDiFPLpxOBI+3GVwc9ElmHUqTyIqJtwSGWDQDBIPnHn/EA=; path=/; expires=Fri, 17-Mar-23 02:08:18 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
          ],
          'strict-transport-security': 'max-age=31536000; includeSubDomains',
          'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
          'x-ratelimit-limit': '5',
          'x-ratelimit-remaining': '4',
          'x-ratelimit-reset': '1679017100',
          'x-ratelimit-reset-after': '1',
          via: '1.1 google',
          'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
          'cf-cache-status': 'DYNAMIC',
          'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ZAPOx1dwKpEGdDjbmqHY%2FuzNY8PIiIskmzKL6uoGpvlaPYVRhWYP7qfqw0fmQg3MUvWOe5TQrSWTy0JEWzs0DaZnZqnm2opO%2BZr1DW4l%2FMr2V8kb6EIrCs51Mlab%2FV6H"}],"group":"cf-nel","max_age":604800}',
          nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
          server: 'cloudflare',
          'cf-ray': '7a9184007cb53553-CNF'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
            'User-Agent': 'axios/1.3.4',
            'Content-Length': '61912',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'post',
          url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          data: FormData {
            _overheadLength: 150,
            _valueLength: 61706,
            _valuesToMeasure: [],
            writable: false,
            readable: true,
            dataSize: 0,
            maxDataSize: 2097152,
            pauseStreams: true,
            _released: true,
            _streams: [],
            _currentStream: null,
            _insideLoop: false,
            _pendingNext: false,
            _boundary: '--------------------------406826187559853176758822',
            _events: [Object: null prototype] {
              end: [Function (anonymous)],
              error: [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              close: [Function (anonymous)]
            },
            _eventsCount: 3
          }
        },
        request: <ref *1> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '61912',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 104,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: multipart/form-data; boundary=--------------------------406826187559853176758822\r\n' +
            'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
            'User-Agent: axios/1.3.4\r\n' +
            'Content-Length: 61912\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: discordapp.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'discordapp.com:443:::::::::::::::::::::': [
                <ref *2> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'discordapp.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener]
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'discordapp.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: true,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: true,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *1],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *2],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *2]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 104,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 1465,
                  [Symbol(kBytesWritten)]: 62339,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                      authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                      'User-Agent': 'axios/1.3.4',
                      'Content-Length': '61912',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'discordapp.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *3],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/channels/1067968693017002047/messages',
                    _defaultAgent: [Circular *3],
                    host: 'discordapp.com',
                    noDelay: true,
                    servername: 'discordapp.com',
                    _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
              },
              list: [ 'discordapp.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/api/channels/1067968693017002047/messages',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              constructed: true,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: true,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: handleStreamEnd]
              ],
              error: [Function: handleStreamError],
              data: [Function: handleStreamData],
              aborted: [Function: handlerStreamAborted]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 104,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1465,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Date',
              'Fri, 17 Mar 2023 01:38:18 GMT',
              'Content-Type',
              'application/json',
              'Content-Length',
              '22',
              'Connection',
              'close',
              'set-cookie',
              '__dcfduid=64ced6ecc46411ed973d66bcffee43da; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'strict-transport-security',
              'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket',
              '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit',
              '5',
              'x-ratelimit-remaining',
              '4',
              'x-ratelimit-reset',
              '1679017100',
              'x-ratelimit-reset-after',
              '1',
              'Via',
              '1.1 google',
              'Alt-Svc',
              'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'CF-Cache-Status',
              'DYNAMIC',
              'Set-Cookie',
              '__sdcfduid=64ced6ecc46411ed973d66bcffee43dae86a460155206f8e4686af6e52fcb5d184eaa0ef80e04ef41f55300f84d2d718; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'Set-Cookie',
              '__cf_bm=lsQPPEtFwq7ULXHj89txlptaheg6OBZ6VkmhqOWo5FM-1679017098-0-AUV7IBFrYKIL9qno1Lb/4QROmLXNVrfcKq9qF0yAJZDiFPLpxOBI+3GVwc9ElmHUqTyIqJtwSGWDQDBIPnHn/EA=; path=/; expires=Fri, 17-Mar-23 02:08:18 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
              'Report-To',
              '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ZAPOx1dwKpEGdDjbmqHY%2FuzNY8PIiIskmzKL6uoGpvlaPYVRhWYP7qfqw0fmQg3MUvWOe5TQrSWTy0JEWzs0DaZnZqnm2opO%2BZr1DW4l%2FMr2V8kb6EIrCs51Mlab%2FV6H"}],"group":"cf-nel","max_age":604800}',
              'NEL',
              '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              'Server',
              'cloudflare',
              'CF-RAY',
              '7a9184007cb53553-CNF'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 104,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1465,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            _consuming: false,
            _dumped: false,
            req: [Circular *1],
            responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              date: 'Fri, 17 Mar 2023 01:38:18 GMT',
              'content-type': 'application/json',
              'content-length': '22',
              connection: 'close',
              'set-cookie': [
                '__dcfduid=64ced6ecc46411ed973d66bcffee43da; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__sdcfduid=64ced6ecc46411ed973d66bcffee43dae86a460155206f8e4686af6e52fcb5d184eaa0ef80e04ef41f55300f84d2d718; Expires=Wed, 15-Mar-2028 01:38:18 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__cf_bm=lsQPPEtFwq7ULXHj89txlptaheg6OBZ6VkmhqOWo5FM-1679017098-0-AUV7IBFrYKIL9qno1Lb/4QROmLXNVrfcKq9qF0yAJZDiFPLpxOBI+3GVwc9ElmHUqTyIqJtwSGWDQDBIPnHn/EA=; path=/; expires=Fri, 17-Mar-23 02:08:18 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
              ],
              'strict-transport-security': 'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit': '5',
              'x-ratelimit-remaining': '4',
              'x-ratelimit-reset': '1679017100',
              'x-ratelimit-reset-after': '1',
              via: '1.1 google',
              'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'cf-cache-status': 'DYNAMIC',
              'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=ZAPOx1dwKpEGdDjbmqHY%2FuzNY8PIiIskmzKL6uoGpvlaPYVRhWYP7qfqw0fmQg3MUvWOe5TQrSWTy0JEWzs0DaZnZqnm2opO%2BZr1DW4l%2FMr2V8kb6EIrCs51Mlab%2FV6H"}],"group":"cf-nel","max_age":604800}',
              nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              server: 'cloudflare',
              'cf-ray': '7a9184007cb53553-CNF'
            },
            [Symbol(kHeadersCount)]: 40,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'discordapp.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/api/channels/1067968693017002047/messages',
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [
                        <ref *2> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: undefined,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'discordapp.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose],
                              [Function: socketCloseListener]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: socketErrorListener]
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'discordapp.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            constructed: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: true,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: false
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: true,
                            destroyed: true,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: true,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: null,
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          parser: null,
                          _httpMessage: [Circular *1],
                          [Symbol(res)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *2],
                              [Symbol(handle_onclose)]: [Function: done]
                            },
                            _parentWrap: undefined,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *2]
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: 104,
                          [Symbol(kHandle)]: null,
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 60,
                          [Symbol(kBytesRead)]: 1465,
                          [Symbol(kBytesWritten)]: 62339,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'POST',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'Content-Type': 'multipart/form-data; boundary=--------------------------406826187559853176758822',
                              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                              'User-Agent': 'axios/1.3.4',
                              'Content-Length': '61912',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'discordapp.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *4],
                            pathname: '/api/channels/1067968693017002047/messages',
                            _defaultAgent: [Circular *3],
                            host: 'discordapp.com',
                            noDelay: true,
                            servername: 'discordapp.com',
                            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                            encoding: null,
                            singleUse: true
                          }
                        }
                      ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 61912,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *1],
            _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kEndCalled)]: true,
          [Symbol(kNeedDrain)]: true,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [
              'Content-Type',
              'multipart/form-data; boundary=--------------------------406826187559853176758822'
            ],
            authorization: [
              'authorization',
              'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
            ],
            'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
            'content-length': [ 'Content-Length', '61912' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'discordapp.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kUniqueHeaders)]: null
        },
        data: { attachments: [ '0' ] }
      }
    },
    level: 'error',
    message: 'uncaughtException: Request failed with status code 400\n' +
      'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    stack: 'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    exception: true,
    date: 'Thu Mar 16 2023 22:38:18 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 61640,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 345546752,
        heapTotal: 228343808,
        heapUsed: 205585272,
        external: 7294534,
        arrayBuffers: 4550654
      }
    },
    os: { loadavg: [ 0.86, 1.24, 1.38 ], uptime: 46478.47 },
    trace: [
      {
        column: 12,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js',
        function: 'settle',
        line: 19,
        method: null,
        native: false
      },
      {
        column: 11,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js',
        function: 'IncomingMessage.handleStreamEnd',
        line: 556,
        method: 'handleStreamEnd',
        native: false
      },
      {
        column: 35,
        file: 'node:events',
        function: 'IncomingMessage.emit',
        line: 525,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:domain',
        function: 'IncomingMessage.emit',
        line: 489,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:internal/streams/readable',
        function: 'endReadableNT',
        line: 1359,
        method: null,
        native: false
      },
      {
        column: 21,
        file: 'node:internal/process/task_queues',
        function: 'processTicksAndRejections',
        line: 82,
        method: null,
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:38:18:3818'
}
{
  meta: {
    error: AxiosError: Request failed with status code 400
        at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)
        at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)
        at IncomingMessage.emit (node:events:525:35)
        at IncomingMessage.emit (node:domain:489:12)
        at endReadableNT (node:internal/streams/readable:1359:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
          authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '61912',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
        data: FormData {
          _overheadLength: 150,
          _valueLength: 61706,
          _valuesToMeasure: [],
          writable: false,
          readable: true,
          dataSize: 0,
          maxDataSize: 2097152,
          pauseStreams: true,
          _released: true,
          _streams: [],
          _currentStream: null,
          _insideLoop: false,
          _pendingNext: false,
          _boundary: '--------------------------063789090113643093511880',
          _events: [Object: null prototype] {
            end: [Function (anonymous)],
            error: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            close: [Function (anonymous)]
          },
          _eventsCount: 3
        }
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '61912',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'discordapp.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'discordapp.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2],
              [Symbol(handle_onclose)]: [Function: done]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 166,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 1465,
          [Symbol(kBytesWritten)]: 62339,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                },
                list: [ 'discordapp.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'discordapp.com',
            noDelay: true,
            servername: 'discordapp.com',
            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: multipart/form-data; boundary=--------------------------063789090113643093511880\r\n' +
          'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
          'User-Agent: axios/1.3.4\r\n' +
          'Content-Length: 61912\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: discordapp.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'discordapp.com:443:::::::::::::::::::::': [
              <ref *2> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'discordapp.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener]
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'discordapp.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: true,
                  destroyed: true,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: true,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: null,
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *2],
                    [Symbol(handle_onclose)]: [Function: done]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 166,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 1465,
                [Symbol(kBytesWritten)]: 62339,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                    authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                    'User-Agent': 'axios/1.3.4',
                    'Content-Length': '61912',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'discordapp.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/channels/1067968693017002047/messages',
                  _defaultAgent: [Circular *3],
                  host: 'discordapp.com',
                  noDelay: true,
                  servername: 'discordapp.com',
                  _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
            },
            list: [ 'discordapp.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/channels/1067968693017002047/messages',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 166,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 17 Mar 2023 01:38:33 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '22',
            'Connection',
            'close',
            'set-cookie',
            '__dcfduid=6d7780fac46411ed907926aa48193b45; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'strict-transport-security',
            'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket',
            '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit',
            '5',
            'x-ratelimit-remaining',
            '4',
            'x-ratelimit-reset',
            '1679017115',
            'x-ratelimit-reset-after',
            '1',
            'Via',
            '1.1 google',
            'Alt-Svc',
            'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'CF-Cache-Status',
            'DYNAMIC',
            'Set-Cookie',
            '__sdcfduid=6d7780fac46411ed907926aa48193b4533e7d4bda1148f9d3cc2b8f9a224952533671a3e7f08f461bf5878a8680a4f07; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'Set-Cookie',
            '__cf_bm=OYosuWwMH605pcI3pGiKvzzT_js0nk7IsUaWA9dRres-1679017113-0-AVi+BTAoortcZy/Q7Jwv6w9mwx0/XgwDnn179UW7uEdRyTsEAH0QJvkCnNF2XMkXYoNlbnn8IF7773quak8MvLM=; path=/; expires=Fri, 17-Mar-23 02:08:33 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
            'Report-To',
            '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=auJqESpdKB0NW2WyLOcG6M%2BqEDb2yjZ78p1Civ7gjl183D%2BUrhxXs%2F%2FWxOh6cWdJG53lSri6lg5HtXM80fjZmcmMgf8NS6oDUm8DjNbiQoCj1GZ5chd11zVRIGLmAKcQ"}],"group":"cf-nel","max_age":604800}',
            'NEL',
            '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            'Server',
            'cloudflare',
            'CF-RAY',
            '7a91845b9d62356b-CNF'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 166,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 17 Mar 2023 01:38:33 GMT',
            'content-type': 'application/json',
            'content-length': '22',
            connection: 'close',
            'set-cookie': [
              '__dcfduid=6d7780fac46411ed907926aa48193b45; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__sdcfduid=6d7780fac46411ed907926aa48193b4533e7d4bda1148f9d3cc2b8f9a224952533671a3e7f08f461bf5878a8680a4f07; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__cf_bm=OYosuWwMH605pcI3pGiKvzzT_js0nk7IsUaWA9dRres-1679017113-0-AVi+BTAoortcZy/Q7Jwv6w9mwx0/XgwDnn179UW7uEdRyTsEAH0QJvkCnNF2XMkXYoNlbnn8IF7773quak8MvLM=; path=/; expires=Fri, 17-Mar-23 02:08:33 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
            ],
            'strict-transport-security': 'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit': '5',
            'x-ratelimit-remaining': '4',
            'x-ratelimit-reset': '1679017115',
            'x-ratelimit-reset-after': '1',
            via: '1.1 google',
            'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'cf-cache-status': 'DYNAMIC',
            'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=auJqESpdKB0NW2WyLOcG6M%2BqEDb2yjZ78p1Civ7gjl183D%2BUrhxXs%2F%2FWxOh6cWdJG53lSri6lg5HtXM80fjZmcmMgf8NS6oDUm8DjNbiQoCj1GZ5chd11zVRIGLmAKcQ"}],"group":"cf-nel","max_age":604800}',
            nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            server: 'cloudflare',
            'cf-ray': '7a91845b9d62356b-CNF'
          },
          [Symbol(kHeadersCount)]: 40,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'discordapp.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/api/channels/1067968693017002047/messages',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [
                      <ref *2> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'discordapp.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener]
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'discordapp.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: true,
                          destroyed: true,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: true,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: null,
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *1],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *2],
                            [Symbol(handle_onclose)]: [Function: done]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *2]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 166,
                        [Symbol(kHandle)]: null,
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 1465,
                        [Symbol(kBytesWritten)]: 62339,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                            'User-Agent': 'axios/1.3.4',
                            'Content-Length': '61912',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'discordapp.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/api/channels/1067968693017002047/messages',
                          _defaultAgent: [Circular *3],
                          host: 'discordapp.com',
                          noDelay: true,
                          servername: 'discordapp.com',
                          _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 61912,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: true,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [
            'Content-Type',
            'multipart/form-data; boundary=--------------------------063789090113643093511880'
          ],
          authorization: [
            'authorization',
            'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
          'content-length': [ 'Content-Length', '61912' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'discordapp.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          date: 'Fri, 17 Mar 2023 01:38:33 GMT',
          'content-type': 'application/json',
          'content-length': '22',
          connection: 'close',
          'set-cookie': [
            '__dcfduid=6d7780fac46411ed907926aa48193b45; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__sdcfduid=6d7780fac46411ed907926aa48193b4533e7d4bda1148f9d3cc2b8f9a224952533671a3e7f08f461bf5878a8680a4f07; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__cf_bm=OYosuWwMH605pcI3pGiKvzzT_js0nk7IsUaWA9dRres-1679017113-0-AVi+BTAoortcZy/Q7Jwv6w9mwx0/XgwDnn179UW7uEdRyTsEAH0QJvkCnNF2XMkXYoNlbnn8IF7773quak8MvLM=; path=/; expires=Fri, 17-Mar-23 02:08:33 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
          ],
          'strict-transport-security': 'max-age=31536000; includeSubDomains',
          'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
          'x-ratelimit-limit': '5',
          'x-ratelimit-remaining': '4',
          'x-ratelimit-reset': '1679017115',
          'x-ratelimit-reset-after': '1',
          via: '1.1 google',
          'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
          'cf-cache-status': 'DYNAMIC',
          'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=auJqESpdKB0NW2WyLOcG6M%2BqEDb2yjZ78p1Civ7gjl183D%2BUrhxXs%2F%2FWxOh6cWdJG53lSri6lg5HtXM80fjZmcmMgf8NS6oDUm8DjNbiQoCj1GZ5chd11zVRIGLmAKcQ"}],"group":"cf-nel","max_age":604800}',
          nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
          server: 'cloudflare',
          'cf-ray': '7a91845b9d62356b-CNF'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
            'User-Agent': 'axios/1.3.4',
            'Content-Length': '61912',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'post',
          url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          data: FormData {
            _overheadLength: 150,
            _valueLength: 61706,
            _valuesToMeasure: [],
            writable: false,
            readable: true,
            dataSize: 0,
            maxDataSize: 2097152,
            pauseStreams: true,
            _released: true,
            _streams: [],
            _currentStream: null,
            _insideLoop: false,
            _pendingNext: false,
            _boundary: '--------------------------063789090113643093511880',
            _events: [Object: null prototype] {
              end: [Function (anonymous)],
              error: [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              close: [Function (anonymous)]
            },
            _eventsCount: 3
          }
        },
        request: <ref *1> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '61912',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 166,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1465,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: multipart/form-data; boundary=--------------------------063789090113643093511880\r\n' +
            'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
            'User-Agent: axios/1.3.4\r\n' +
            'Content-Length: 61912\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: discordapp.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'discordapp.com:443:::::::::::::::::::::': [
                <ref *2> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'discordapp.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener]
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'discordapp.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: true,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: true,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *1],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *2],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *2]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 166,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 1465,
                  [Symbol(kBytesWritten)]: 62339,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                      authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                      'User-Agent': 'axios/1.3.4',
                      'Content-Length': '61912',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'discordapp.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *3],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/channels/1067968693017002047/messages',
                    _defaultAgent: [Circular *3],
                    host: 'discordapp.com',
                    noDelay: true,
                    servername: 'discordapp.com',
                    _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
              },
              list: [ 'discordapp.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/api/channels/1067968693017002047/messages',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              constructed: true,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: true,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: handleStreamEnd]
              ],
              error: [Function: handleStreamError],
              data: [Function: handleStreamData],
              aborted: [Function: handlerStreamAborted]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 166,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1465,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Date',
              'Fri, 17 Mar 2023 01:38:33 GMT',
              'Content-Type',
              'application/json',
              'Content-Length',
              '22',
              'Connection',
              'close',
              'set-cookie',
              '__dcfduid=6d7780fac46411ed907926aa48193b45; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'strict-transport-security',
              'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket',
              '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit',
              '5',
              'x-ratelimit-remaining',
              '4',
              'x-ratelimit-reset',
              '1679017115',
              'x-ratelimit-reset-after',
              '1',
              'Via',
              '1.1 google',
              'Alt-Svc',
              'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'CF-Cache-Status',
              'DYNAMIC',
              'Set-Cookie',
              '__sdcfduid=6d7780fac46411ed907926aa48193b4533e7d4bda1148f9d3cc2b8f9a224952533671a3e7f08f461bf5878a8680a4f07; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'Set-Cookie',
              '__cf_bm=OYosuWwMH605pcI3pGiKvzzT_js0nk7IsUaWA9dRres-1679017113-0-AVi+BTAoortcZy/Q7Jwv6w9mwx0/XgwDnn179UW7uEdRyTsEAH0QJvkCnNF2XMkXYoNlbnn8IF7773quak8MvLM=; path=/; expires=Fri, 17-Mar-23 02:08:33 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
              'Report-To',
              '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=auJqESpdKB0NW2WyLOcG6M%2BqEDb2yjZ78p1Civ7gjl183D%2BUrhxXs%2F%2FWxOh6cWdJG53lSri6lg5HtXM80fjZmcmMgf8NS6oDUm8DjNbiQoCj1GZ5chd11zVRIGLmAKcQ"}],"group":"cf-nel","max_age":604800}',
              'NEL',
              '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              'Server',
              'cloudflare',
              'CF-RAY',
              '7a91845b9d62356b-CNF'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 166,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1465,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            _consuming: false,
            _dumped: false,
            req: [Circular *1],
            responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              date: 'Fri, 17 Mar 2023 01:38:33 GMT',
              'content-type': 'application/json',
              'content-length': '22',
              connection: 'close',
              'set-cookie': [
                '__dcfduid=6d7780fac46411ed907926aa48193b45; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__sdcfduid=6d7780fac46411ed907926aa48193b4533e7d4bda1148f9d3cc2b8f9a224952533671a3e7f08f461bf5878a8680a4f07; Expires=Wed, 15-Mar-2028 01:38:33 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__cf_bm=OYosuWwMH605pcI3pGiKvzzT_js0nk7IsUaWA9dRres-1679017113-0-AVi+BTAoortcZy/Q7Jwv6w9mwx0/XgwDnn179UW7uEdRyTsEAH0QJvkCnNF2XMkXYoNlbnn8IF7773quak8MvLM=; path=/; expires=Fri, 17-Mar-23 02:08:33 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
              ],
              'strict-transport-security': 'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit': '5',
              'x-ratelimit-remaining': '4',
              'x-ratelimit-reset': '1679017115',
              'x-ratelimit-reset-after': '1',
              via: '1.1 google',
              'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'cf-cache-status': 'DYNAMIC',
              'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=auJqESpdKB0NW2WyLOcG6M%2BqEDb2yjZ78p1Civ7gjl183D%2BUrhxXs%2F%2FWxOh6cWdJG53lSri6lg5HtXM80fjZmcmMgf8NS6oDUm8DjNbiQoCj1GZ5chd11zVRIGLmAKcQ"}],"group":"cf-nel","max_age":604800}',
              nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              server: 'cloudflare',
              'cf-ray': '7a91845b9d62356b-CNF'
            },
            [Symbol(kHeadersCount)]: 40,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'discordapp.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/api/channels/1067968693017002047/messages',
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [
                        <ref *2> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'discordapp.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose],
                              [Function: socketCloseListener]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: socketErrorListener]
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'discordapp.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            constructed: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: true,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: false
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: true,
                            destroyed: true,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: true,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: null,
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          parser: null,
                          _httpMessage: [Circular *1],
                          [Symbol(res)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *2],
                              [Symbol(handle_onclose)]: [Function: done]
                            },
                            _parentWrap: undefined,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *2]
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: 166,
                          [Symbol(kHandle)]: null,
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 60,
                          [Symbol(kBytesRead)]: 1465,
                          [Symbol(kBytesWritten)]: 62339,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            session: <Buffer 30 82 06 b6 02 01 01 02 02 03 04 04 02 13 02 04 20 78 2e 83 02 df 3c 52 51 c2 04 2a b5 c6 fb 3d 83 e7 73 33 18 a6 98 e3 59 ec 3f 26 7a 52 d3 3c df 04 ... 1672 more bytes>,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'POST',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'Content-Type': 'multipart/form-data; boundary=--------------------------063789090113643093511880',
                              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                              'User-Agent': 'axios/1.3.4',
                              'Content-Length': '61912',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'discordapp.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *4],
                            pathname: '/api/channels/1067968693017002047/messages',
                            _defaultAgent: [Circular *3],
                            host: 'discordapp.com',
                            noDelay: true,
                            servername: 'discordapp.com',
                            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                            encoding: null,
                            singleUse: true
                          }
                        }
                      ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 65 ae 2a eb 46 8a 6b 54 a3 63 d0 d4 b8 87 2f 23 46 5d 23 3b 93 08 0e 85 e0 f9 fd 9a 1c c0 4d c7 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 61912,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *1],
            _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kEndCalled)]: true,
          [Symbol(kNeedDrain)]: true,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [
              'Content-Type',
              'multipart/form-data; boundary=--------------------------063789090113643093511880'
            ],
            authorization: [
              'authorization',
              'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
            ],
            'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
            'content-length': [ 'Content-Length', '61912' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'discordapp.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kUniqueHeaders)]: null
        },
        data: { attachments: [ '0' ] }
      }
    },
    level: 'error',
    message: 'uncaughtException: Request failed with status code 400\n' +
      'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    stack: 'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    exception: true,
    date: 'Thu Mar 16 2023 22:38:33 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 61640,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 311701504,
        heapTotal: 194265088,
        heapUsed: 187776632,
        external: 6546006,
        arrayBuffers: 3805683
      }
    },
    os: { loadavg: [ 0.67, 1.17, 1.35 ], uptime: 46492.97 },
    trace: [
      {
        column: 12,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js',
        function: 'settle',
        line: 19,
        method: null,
        native: false
      },
      {
        column: 11,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js',
        function: 'IncomingMessage.handleStreamEnd',
        line: 556,
        method: 'handleStreamEnd',
        native: false
      },
      {
        column: 35,
        file: 'node:events',
        function: 'IncomingMessage.emit',
        line: 525,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:domain',
        function: 'IncomingMessage.emit',
        line: 489,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:internal/streams/readable',
        function: 'endReadableNT',
        line: 1359,
        method: null,
        native: false
      },
      {
        column: 21,
        file: 'node:internal/process/task_queues',
        function: 'processTicksAndRejections',
        line: 82,
        method: null,
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:38:33:3833'
}
{
  meta: {
    error: AxiosError: Request failed with status code 400
        at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)
        at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)
        at IncomingMessage.emit (node:events:525:35)
        at IncomingMessage.emit (node:domain:489:12)
        at endReadableNT (node:internal/streams/readable:1359:12)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_BAD_REQUEST',
      config: {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: [ 'xhr', 'http' ],
        transformRequest: [ [Function: transformRequest] ],
        transformResponse: [ [Function: transformResponse] ],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: [Function: FormData] {
            LINE_BREAK: '\r\n',
            DEFAULT_CONTENT_TYPE: 'application/octet-stream'
          },
          Blob: [class Blob]
        },
        validateStatus: [Function: validateStatus],
        headers: AxiosHeaders {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
          authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
          'User-Agent': 'axios/1.3.4',
          'Content-Length': '61912',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        method: 'post',
        url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
        data: FormData {
          _overheadLength: 150,
          _valueLength: 61706,
          _valuesToMeasure: [],
          writable: false,
          readable: true,
          dataSize: 0,
          maxDataSize: 2097152,
          pauseStreams: true,
          _released: true,
          _streams: [],
          _currentStream: null,
          _insideLoop: false,
          _pendingNext: false,
          _boundary: '--------------------------699555523360101632895644',
          _events: [Object: null prototype] {
            end: [Function (anonymous)],
            error: [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            close: [Function (anonymous)]
          },
          _eventsCount: 3
        }
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype] {
          abort: [Function (anonymous)],
          aborted: [Function (anonymous)],
          connect: [Function (anonymous)],
          error: [Function (anonymous)],
          socket: [Function (anonymous)],
          timeout: [Function (anonymous)],
          finish: [Function: requestOnFinish]
        },
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: '61912',
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: <ref *2> TLSSocket {
          _tlsOptions: {
            allowHalfOpen: undefined,
            pipe: false,
            secureContext: SecureContext { context: SecureContext {} },
            isServer: false,
            requestCert: true,
            rejectUnauthorized: true,
            session: undefined,
            ALPNProtocols: undefined,
            requestOCSP: undefined,
            enableTrace: undefined,
            pskCallback: undefined,
            highWaterMark: undefined,
            onread: undefined,
            signal: undefined
          },
          _secureEstablished: true,
          _securePending: false,
          _newSessionPending: false,
          _controlReleased: true,
          secureConnecting: false,
          _SNICallback: null,
          servername: 'discordapp.com',
          alpnProtocol: false,
          authorized: true,
          authorizationError: null,
          encrypted: true,
          _events: [Object: null prototype] {
            close: [
              [Function: onSocketCloseDestroySSL],
              [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              [Function: onClose],
              [Function: socketCloseListener]
            ],
            end: [Function: onReadableStreamEnd],
            newListener: [Function: keylogNewListener],
            secure: [Function: onConnectSecure],
            session: [Function (anonymous)],
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove],
            error: [Function: socketErrorListener]
          },
          _eventsCount: 9,
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'discordapp.com',
          _closeAfterHandlingError: false,
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _maxListeners: undefined,
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: true,
            needDrain: false,
            ending: true,
            ended: true,
            finished: true,
            destroyed: true,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: true,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            [Symbol(kOnFinished)]: []
          },
          allowHalfOpen: false,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: undefined,
          _server: null,
          ssl: null,
          _requestCert: true,
          _rejectUnauthorized: true,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(res)]: TLSWrap {
            _parent: TCP {
              reading: [Getter/Setter],
              onconnection: null,
              [Symbol(owner_symbol)]: [Circular *2],
              [Symbol(handle_onclose)]: [Function: done]
            },
            _parentWrap: undefined,
            _secureContext: SecureContext { context: SecureContext {} },
            reading: true,
            onkeylog: [Function: onkeylog],
            onhandshakestart: {},
            onhandshakedone: [Function (anonymous)],
            onocspresponse: [Function: onocspresponse],
            onnewsession: [Function: onnewsessionclient],
            onerror: [Function: onerror],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(verified)]: true,
          [Symbol(pendingSession)]: null,
          [Symbol(async_id_symbol)]: 100,
          [Symbol(kHandle)]: null,
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: null,
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: false,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 1467,
          [Symbol(kBytesWritten)]: 62339,
          [Symbol(connect-options)]: {
            rejectUnauthorized: true,
            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
            checkServerIdentity: [Function: checkServerIdentity],
            minDHSize: 1024,
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: null,
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: 443,
            agent: undefined,
            nativeProtocols: {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages',
            _defaultAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)],
                newListener: [Function: maybeEnableKeylog]
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] { noDelay: true, path: null },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {
                'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
              },
              freeSockets: [Object: null prototype] {},
              keepAliveMsecs: 1000,
              keepAlive: false,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                },
                list: [ 'discordapp.com:443:::::::::::::::::::::' ]
              },
              [Symbol(kCapture)]: false
            },
            host: 'discordapp.com',
            noDelay: true,
            servername: 'discordapp.com',
            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
            encoding: null,
            singleUse: true
          }
        },
        _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: multipart/form-data; boundary=--------------------------699555523360101632895644\r\n' +
          'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
          'User-Agent: axios/1.3.4\r\n' +
          'Content-Length: 61912\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: discordapp.com\r\n' +
          'Connection: close\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: <ref *3> Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)],
            newListener: [Function: maybeEnableKeylog]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] { noDelay: true, path: null },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {
            'discordapp.com:443:::::::::::::::::::::': [
              <ref *2> TLSSocket {
                _tlsOptions: {
                  allowHalfOpen: undefined,
                  pipe: false,
                  secureContext: SecureContext { context: SecureContext {} },
                  isServer: false,
                  requestCert: true,
                  rejectUnauthorized: true,
                  session: undefined,
                  ALPNProtocols: undefined,
                  requestOCSP: undefined,
                  enableTrace: undefined,
                  pskCallback: undefined,
                  highWaterMark: undefined,
                  onread: undefined,
                  signal: undefined
                },
                _secureEstablished: true,
                _securePending: false,
                _newSessionPending: false,
                _controlReleased: true,
                secureConnecting: false,
                _SNICallback: null,
                servername: 'discordapp.com',
                alpnProtocol: false,
                authorized: true,
                authorizationError: null,
                encrypted: true,
                _events: [Object: null prototype] {
                  close: [
                    [Function: onSocketCloseDestroySSL],
                    [Function: bound onceWrapper] {
                      listener: [Function (anonymous)]
                    },
                    [Function: onClose],
                    [Function: socketCloseListener]
                  ],
                  end: [Function: onReadableStreamEnd],
                  newListener: [Function: keylogNewListener],
                  secure: [Function: onConnectSecure],
                  session: [Function (anonymous)],
                  free: [Function: onFree],
                  timeout: [Function: onTimeout],
                  agentRemove: [Function: onRemove],
                  error: [Function: socketErrorListener]
                },
                _eventsCount: 9,
                connecting: false,
                _hadError: false,
                _parent: null,
                _host: 'discordapp.com',
                _closeAfterHandlingError: false,
                _readableState: ReadableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  buffer: BufferList { head: null, tail: null, length: 0 },
                  length: 0,
                  pipes: [],
                  flowing: true,
                  ended: false,
                  endEmitted: false,
                  reading: true,
                  constructed: true,
                  sync: false,
                  needReadable: true,
                  emittedReadable: false,
                  readableListening: false,
                  resumeScheduled: false,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  destroyed: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  defaultEncoding: 'utf8',
                  awaitDrainWriters: null,
                  multiAwaitDrain: false,
                  readingMore: false,
                  dataEmitted: true,
                  decoder: null,
                  encoding: null,
                  [Symbol(kPaused)]: false
                },
                _maxListeners: undefined,
                _writableState: WritableState {
                  objectMode: false,
                  highWaterMark: 16384,
                  finalCalled: true,
                  needDrain: false,
                  ending: true,
                  ended: true,
                  finished: true,
                  destroyed: true,
                  decodeStrings: false,
                  defaultEncoding: 'utf8',
                  length: 0,
                  writing: false,
                  corked: 0,
                  sync: false,
                  bufferProcessing: false,
                  onwrite: [Function: bound onwrite],
                  writecb: null,
                  writelen: 0,
                  afterWriteTickInfo: null,
                  buffered: [],
                  bufferedIndex: 0,
                  allBuffers: true,
                  allNoop: true,
                  pendingcb: 0,
                  constructed: true,
                  prefinished: true,
                  errorEmitted: false,
                  emitClose: false,
                  autoDestroy: true,
                  errored: null,
                  closed: true,
                  closeEmitted: true,
                  [Symbol(kOnFinished)]: []
                },
                allowHalfOpen: false,
                _sockname: null,
                _pendingData: null,
                _pendingEncoding: '',
                server: undefined,
                _server: null,
                ssl: null,
                _requestCert: true,
                _rejectUnauthorized: true,
                parser: null,
                _httpMessage: [Circular *1],
                [Symbol(res)]: TLSWrap {
                  _parent: TCP {
                    reading: [Getter/Setter],
                    onconnection: null,
                    [Symbol(owner_symbol)]: [Circular *2],
                    [Symbol(handle_onclose)]: [Function: done]
                  },
                  _parentWrap: undefined,
                  _secureContext: SecureContext { context: SecureContext {} },
                  reading: true,
                  onkeylog: [Function: onkeylog],
                  onhandshakestart: {},
                  onhandshakedone: [Function (anonymous)],
                  onocspresponse: [Function: onocspresponse],
                  onnewsession: [Function: onnewsessionclient],
                  onerror: [Function: onerror],
                  [Symbol(owner_symbol)]: [Circular *2]
                },
                [Symbol(verified)]: true,
                [Symbol(pendingSession)]: null,
                [Symbol(async_id_symbol)]: 100,
                [Symbol(kHandle)]: null,
                [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                [Symbol(kBuffer)]: null,
                [Symbol(kBufferCb)]: null,
                [Symbol(kBufferGen)]: null,
                [Symbol(kCapture)]: false,
                [Symbol(kSetNoDelay)]: false,
                [Symbol(kSetKeepAlive)]: true,
                [Symbol(kSetKeepAliveInitialDelay)]: 60,
                [Symbol(kBytesRead)]: 1467,
                [Symbol(kBytesWritten)]: 62339,
                [Symbol(connect-options)]: {
                  rejectUnauthorized: true,
                  ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                  checkServerIdentity: [Function: checkServerIdentity],
                  minDHSize: 1024,
                  maxRedirects: 21,
                  maxBodyLength: Infinity,
                  protocol: 'https:',
                  path: null,
                  method: 'POST',
                  headers: [Object: null prototype] {
                    Accept: 'application/json, text/plain, */*',
                    'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                    authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                    'User-Agent': 'axios/1.3.4',
                    'Content-Length': '61912',
                    'Accept-Encoding': 'gzip, compress, deflate, br'
                  },
                  agents: { http: undefined, https: undefined },
                  auth: undefined,
                  beforeRedirect: [Function: dispatchBeforeRedirect],
                  beforeRedirects: { proxy: [Function: beforeRedirect] },
                  hostname: 'discordapp.com',
                  port: 443,
                  agent: undefined,
                  nativeProtocols: {
                    'http:': {
                      _connectionListener: [Function: connectionListener],
                      METHODS: [
                        'ACL',         'BIND',       'CHECKOUT',
                        'CONNECT',     'COPY',       'DELETE',
                        'GET',         'HEAD',       'LINK',
                        'LOCK',        'M-SEARCH',   'MERGE',
                        'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                        'MOVE',        'NOTIFY',     'OPTIONS',
                        'PATCH',       'POST',       'PROPFIND',
                        'PROPPATCH',   'PURGE',      'PUT',
                        'REBIND',      'REPORT',     'SEARCH',
                        'SOURCE',      'SUBSCRIBE',  'TRACE',
                        'UNBIND',      'UNLINK',     'UNLOCK',
                        'UNSUBSCRIBE'
                      ],
                      STATUS_CODES: {
                        '100': 'Continue',
                        '101': 'Switching Protocols',
                        '102': 'Processing',
                        '103': 'Early Hints',
                        '200': 'OK',
                        '201': 'Created',
                        '202': 'Accepted',
                        '203': 'Non-Authoritative Information',
                        '204': 'No Content',
                        '205': 'Reset Content',
                        '206': 'Partial Content',
                        '207': 'Multi-Status',
                        '208': 'Already Reported',
                        '226': 'IM Used',
                        '300': 'Multiple Choices',
                        '301': 'Moved Permanently',
                        '302': 'Found',
                        '303': 'See Other',
                        '304': 'Not Modified',
                        '305': 'Use Proxy',
                        '307': 'Temporary Redirect',
                        '308': 'Permanent Redirect',
                        '400': 'Bad Request',
                        '401': 'Unauthorized',
                        '402': 'Payment Required',
                        '403': 'Forbidden',
                        '404': 'Not Found',
                        '405': 'Method Not Allowed',
                        '406': 'Not Acceptable',
                        '407': 'Proxy Authentication Required',
                        '408': 'Request Timeout',
                        '409': 'Conflict',
                        '410': 'Gone',
                        '411': 'Length Required',
                        '412': 'Precondition Failed',
                        '413': 'Payload Too Large',
                        '414': 'URI Too Long',
                        '415': 'Unsupported Media Type',
                        '416': 'Range Not Satisfiable',
                        '417': 'Expectation Failed',
                        '418': "I'm a Teapot",
                        '421': 'Misdirected Request',
                        '422': 'Unprocessable Entity',
                        '423': 'Locked',
                        '424': 'Failed Dependency',
                        '425': 'Too Early',
                        '426': 'Upgrade Required',
                        '428': 'Precondition Required',
                        '429': 'Too Many Requests',
                        '431': 'Request Header Fields Too Large',
                        '451': 'Unavailable For Legal Reasons',
                        '500': 'Internal Server Error',
                        '501': 'Not Implemented',
                        '502': 'Bad Gateway',
                        '503': 'Service Unavailable',
                        '504': 'Gateway Timeout',
                        '505': 'HTTP Version Not Supported',
                        '506': 'Variant Also Negotiates',
                        '507': 'Insufficient Storage',
                        '508': 'Loop Detected',
                        '509': 'Bandwidth Limit Exceeded',
                        '510': 'Not Extended',
                        '511': 'Network Authentication Required'
                      },
                      Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                      ClientRequest: [Function: ClientRequest],
                      IncomingMessage: [Function: IncomingMessage],
                      OutgoingMessage: [Function: OutgoingMessage],
                      Server: [Function: Server],
                      ServerResponse: [Function: ServerResponse],
                      createServer: [Function: createServer],
                      validateHeaderName: [Function: __node_internal_],
                      validateHeaderValue: [Function: __node_internal_],
                      get: [Function: get],
                      request: [Function: request],
                      setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                      maxHeaderSize: [Getter],
                      globalAgent: [Getter/Setter]
                    },
                    'https:': {
                      Agent: [Function: Agent],
                      globalAgent: [Circular *3],
                      Server: [Function: Server],
                      createServer: [Function: createServer],
                      get: [Function: get],
                      request: [Function: request]
                    }
                  },
                  pathname: '/api/channels/1067968693017002047/messages',
                  _defaultAgent: [Circular *3],
                  host: 'discordapp.com',
                  noDelay: true,
                  servername: 'discordapp.com',
                  _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                  encoding: null,
                  singleUse: true
                }
              }
            ]
          },
          freeSockets: [Object: null prototype] {},
          keepAliveMsecs: 1000,
          keepAlive: false,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
            },
            list: [ 'discordapp.com:443:::::::::::::::::::::' ]
          },
          [Symbol(kCapture)]: false
        },
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        joinDuplicateHeaders: undefined,
        path: '/api/channels/1067968693017002047/messages',
        _ended: true,
        res: IncomingMessage {
          _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
            pipes: [],
            flowing: true,
            ended: true,
            endEmitted: true,
            reading: false,
            constructed: true,
            sync: true,
            needReadable: false,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            destroyed: true,
            errored: null,
            closed: true,
            closeEmitted: true,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: true,
            dataEmitted: true,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
          },
          _events: [Object: null prototype] {
            end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
            error: [Function: handleStreamError],
            data: [Function: handleStreamData],
            aborted: [Function: handlerStreamAborted]
          },
          _eventsCount: 4,
          _maxListeners: undefined,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 100,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1467,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Date',
            'Fri, 17 Mar 2023 01:39:57 GMT',
            'Content-Type',
            'application/json',
            'Content-Length',
            '22',
            'Connection',
            'close',
            'set-cookie',
            '__dcfduid=9fe357e4c46411ed91c64afca57b4dfb; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'strict-transport-security',
            'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket',
            '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit',
            '5',
            'x-ratelimit-remaining',
            '4',
            'x-ratelimit-reset',
            '1679017199',
            'x-ratelimit-reset-after',
            '1',
            'Via',
            '1.1 google',
            'Alt-Svc',
            'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'CF-Cache-Status',
            'DYNAMIC',
            'Set-Cookie',
            '__sdcfduid=9fe357e4c46411ed91c64afca57b4dfb82b9b0ae39c66da41821d8f84a539995feb2ff323b9283890684f1c4bc8d4c48; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            'Set-Cookie',
            '__cf_bm=cj1FO1KhwRVsH6_5EW.EJFtRT8wi8SdGm3puq2a2bu8-1679017197-0-AQMx1WQCUpH1gSQ6AVlbJMiohRXy+zHF81WhzJiPSgClI8TWvqpaV4Vp0ZWkxoOSPnay5iDXLLtzdBeNDBPUTyc=; path=/; expires=Fri, 17-Mar-23 02:09:57 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
            'Report-To',
            '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YvEdHqKaK4QWSqIyZEeYlwB3vPfo%2BzWr3GNhf%2FZxTIyERJEMN3qfErvHqG7gUdq9WJsFBumR9%2B3JyChctY8I9S%2FcFoJP5zbfTY1ywIDSERfGDGZMsU6yEKru%2B42kNrwv"}],"group":"cf-nel","max_age":604800}',
            'NEL',
            '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            'Server',
            'cloudflare',
            'CF-RAY',
            '7a91866c3df13559-CNF'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: undefined,
          aborted: false,
          upgrade: false,
          url: '',
          method: null,
          statusCode: 400,
          statusMessage: 'Bad Request',
          client: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 100,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1467,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _consuming: false,
          _dumped: false,
          req: [Circular *1],
          responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          redirects: [],
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            date: 'Fri, 17 Mar 2023 01:39:57 GMT',
            'content-type': 'application/json',
            'content-length': '22',
            connection: 'close',
            'set-cookie': [
              '__dcfduid=9fe357e4c46411ed91c64afca57b4dfb; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__sdcfduid=9fe357e4c46411ed91c64afca57b4dfb82b9b0ae39c66da41821d8f84a539995feb2ff323b9283890684f1c4bc8d4c48; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              '__cf_bm=cj1FO1KhwRVsH6_5EW.EJFtRT8wi8SdGm3puq2a2bu8-1679017197-0-AQMx1WQCUpH1gSQ6AVlbJMiohRXy+zHF81WhzJiPSgClI8TWvqpaV4Vp0ZWkxoOSPnay5iDXLLtzdBeNDBPUTyc=; path=/; expires=Fri, 17-Mar-23 02:09:57 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
            ],
            'strict-transport-security': 'max-age=31536000; includeSubDomains',
            'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
            'x-ratelimit-limit': '5',
            'x-ratelimit-remaining': '4',
            'x-ratelimit-reset': '1679017199',
            'x-ratelimit-reset-after': '1',
            via: '1.1 google',
            'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
            'cf-cache-status': 'DYNAMIC',
            'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YvEdHqKaK4QWSqIyZEeYlwB3vPfo%2BzWr3GNhf%2FZxTIyERJEMN3qfErvHqG7gUdq9WJsFBumR9%2B3JyChctY8I9S%2FcFoJP5zbfTY1ywIDSERfGDGZMsU6yEKru%2B42kNrwv"}],"group":"cf-nel","max_age":604800}',
            nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
            server: 'cloudflare',
            'cf-ray': '7a91866c3df13559-CNF'
          },
          [Symbol(kHeadersCount)]: 40,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'discordapp.com',
        protocol: 'https:',
        _redirectable: Writable {
          _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: true,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: true,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
          },
          _events: [Object: null prototype] {
            response: [Function: handleResponse],
            error: [Function: handleRequestError],
            socket: [Function: handleRequestSocket]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _options: {
            maxRedirects: 21,
            maxBodyLength: Infinity,
            protocol: 'https:',
            path: '/api/channels/1067968693017002047/messages',
            method: 'POST',
            headers: [Object: null prototype] {
              Accept: 'application/json, text/plain, */*',
              'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
              'User-Agent': 'axios/1.3.4',
              'Content-Length': '61912',
              'Accept-Encoding': 'gzip, compress, deflate, br'
            },
            agents: { http: undefined, https: undefined },
            auth: undefined,
            beforeRedirect: [Function: dispatchBeforeRedirect],
            beforeRedirects: { proxy: [Function: beforeRedirect] },
            hostname: 'discordapp.com',
            port: '',
            agent: undefined,
            nativeProtocols: <ref *4> {
              'http:': {
                _connectionListener: [Function: connectionListener],
                METHODS: [
                  'ACL',         'BIND',       'CHECKOUT',
                  'CONNECT',     'COPY',       'DELETE',
                  'GET',         'HEAD',       'LINK',
                  'LOCK',        'M-SEARCH',   'MERGE',
                  'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                  'MOVE',        'NOTIFY',     'OPTIONS',
                  'PATCH',       'POST',       'PROPFIND',
                  'PROPPATCH',   'PURGE',      'PUT',
                  'REBIND',      'REPORT',     'SEARCH',
                  'SOURCE',      'SUBSCRIBE',  'TRACE',
                  'UNBIND',      'UNLINK',     'UNLOCK',
                  'UNSUBSCRIBE'
                ],
                STATUS_CODES: {
                  '100': 'Continue',
                  '101': 'Switching Protocols',
                  '102': 'Processing',
                  '103': 'Early Hints',
                  '200': 'OK',
                  '201': 'Created',
                  '202': 'Accepted',
                  '203': 'Non-Authoritative Information',
                  '204': 'No Content',
                  '205': 'Reset Content',
                  '206': 'Partial Content',
                  '207': 'Multi-Status',
                  '208': 'Already Reported',
                  '226': 'IM Used',
                  '300': 'Multiple Choices',
                  '301': 'Moved Permanently',
                  '302': 'Found',
                  '303': 'See Other',
                  '304': 'Not Modified',
                  '305': 'Use Proxy',
                  '307': 'Temporary Redirect',
                  '308': 'Permanent Redirect',
                  '400': 'Bad Request',
                  '401': 'Unauthorized',
                  '402': 'Payment Required',
                  '403': 'Forbidden',
                  '404': 'Not Found',
                  '405': 'Method Not Allowed',
                  '406': 'Not Acceptable',
                  '407': 'Proxy Authentication Required',
                  '408': 'Request Timeout',
                  '409': 'Conflict',
                  '410': 'Gone',
                  '411': 'Length Required',
                  '412': 'Precondition Failed',
                  '413': 'Payload Too Large',
                  '414': 'URI Too Long',
                  '415': 'Unsupported Media Type',
                  '416': 'Range Not Satisfiable',
                  '417': 'Expectation Failed',
                  '418': "I'm a Teapot",
                  '421': 'Misdirected Request',
                  '422': 'Unprocessable Entity',
                  '423': 'Locked',
                  '424': 'Failed Dependency',
                  '425': 'Too Early',
                  '426': 'Upgrade Required',
                  '428': 'Precondition Required',
                  '429': 'Too Many Requests',
                  '431': 'Request Header Fields Too Large',
                  '451': 'Unavailable For Legal Reasons',
                  '500': 'Internal Server Error',
                  '501': 'Not Implemented',
                  '502': 'Bad Gateway',
                  '503': 'Service Unavailable',
                  '504': 'Gateway Timeout',
                  '505': 'HTTP Version Not Supported',
                  '506': 'Variant Also Negotiates',
                  '507': 'Insufficient Storage',
                  '508': 'Loop Detected',
                  '509': 'Bandwidth Limit Exceeded',
                  '510': 'Not Extended',
                  '511': 'Network Authentication Required'
                },
                Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                ClientRequest: [Function: ClientRequest],
                IncomingMessage: [Function: IncomingMessage],
                OutgoingMessage: [Function: OutgoingMessage],
                Server: [Function: Server],
                ServerResponse: [Function: ServerResponse],
                createServer: [Function: createServer],
                validateHeaderName: [Function: __node_internal_],
                validateHeaderValue: [Function: __node_internal_],
                get: [Function: get],
                request: [Function: request],
                setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                maxHeaderSize: [Getter],
                globalAgent: [Getter/Setter]
              },
              'https:': {
                Agent: [Function: Agent],
                globalAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [
                      <ref *2> TLSSocket {
                        _tlsOptions: {
                          allowHalfOpen: undefined,
                          pipe: false,
                          secureContext: SecureContext { context: SecureContext {} },
                          isServer: false,
                          requestCert: true,
                          rejectUnauthorized: true,
                          session: undefined,
                          ALPNProtocols: undefined,
                          requestOCSP: undefined,
                          enableTrace: undefined,
                          pskCallback: undefined,
                          highWaterMark: undefined,
                          onread: undefined,
                          signal: undefined
                        },
                        _secureEstablished: true,
                        _securePending: false,
                        _newSessionPending: false,
                        _controlReleased: true,
                        secureConnecting: false,
                        _SNICallback: null,
                        servername: 'discordapp.com',
                        alpnProtocol: false,
                        authorized: true,
                        authorizationError: null,
                        encrypted: true,
                        _events: [Object: null prototype] {
                          close: [
                            [Function: onSocketCloseDestroySSL],
                            [Function: bound onceWrapper] {
                              listener: [Function (anonymous)]
                            },
                            [Function: onClose],
                            [Function: socketCloseListener]
                          ],
                          end: [Function: onReadableStreamEnd],
                          newListener: [Function: keylogNewListener],
                          secure: [Function: onConnectSecure],
                          session: [Function (anonymous)],
                          free: [Function: onFree],
                          timeout: [Function: onTimeout],
                          agentRemove: [Function: onRemove],
                          error: [Function: socketErrorListener]
                        },
                        _eventsCount: 9,
                        connecting: false,
                        _hadError: false,
                        _parent: null,
                        _host: 'discordapp.com',
                        _closeAfterHandlingError: false,
                        _readableState: ReadableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          buffer: BufferList { head: null, tail: null, length: 0 },
                          length: 0,
                          pipes: [],
                          flowing: true,
                          ended: false,
                          endEmitted: false,
                          reading: true,
                          constructed: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          resumeScheduled: false,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          destroyed: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          defaultEncoding: 'utf8',
                          awaitDrainWriters: null,
                          multiAwaitDrain: false,
                          readingMore: false,
                          dataEmitted: true,
                          decoder: null,
                          encoding: null,
                          [Symbol(kPaused)]: false
                        },
                        _maxListeners: undefined,
                        _writableState: WritableState {
                          objectMode: false,
                          highWaterMark: 16384,
                          finalCalled: true,
                          needDrain: false,
                          ending: true,
                          ended: true,
                          finished: true,
                          destroyed: true,
                          decodeStrings: false,
                          defaultEncoding: 'utf8',
                          length: 0,
                          writing: false,
                          corked: 0,
                          sync: false,
                          bufferProcessing: false,
                          onwrite: [Function: bound onwrite],
                          writecb: null,
                          writelen: 0,
                          afterWriteTickInfo: null,
                          buffered: [],
                          bufferedIndex: 0,
                          allBuffers: true,
                          allNoop: true,
                          pendingcb: 0,
                          constructed: true,
                          prefinished: true,
                          errorEmitted: false,
                          emitClose: false,
                          autoDestroy: true,
                          errored: null,
                          closed: true,
                          closeEmitted: true,
                          [Symbol(kOnFinished)]: []
                        },
                        allowHalfOpen: false,
                        _sockname: null,
                        _pendingData: null,
                        _pendingEncoding: '',
                        server: undefined,
                        _server: null,
                        ssl: null,
                        _requestCert: true,
                        _rejectUnauthorized: true,
                        parser: null,
                        _httpMessage: [Circular *1],
                        [Symbol(res)]: TLSWrap {
                          _parent: TCP {
                            reading: [Getter/Setter],
                            onconnection: null,
                            [Symbol(owner_symbol)]: [Circular *2],
                            [Symbol(handle_onclose)]: [Function: done]
                          },
                          _parentWrap: undefined,
                          _secureContext: SecureContext { context: SecureContext {} },
                          reading: true,
                          onkeylog: [Function: onkeylog],
                          onhandshakestart: {},
                          onhandshakedone: [Function (anonymous)],
                          onocspresponse: [Function: onocspresponse],
                          onnewsession: [Function: onnewsessionclient],
                          onerror: [Function: onerror],
                          [Symbol(owner_symbol)]: [Circular *2]
                        },
                        [Symbol(verified)]: true,
                        [Symbol(pendingSession)]: null,
                        [Symbol(async_id_symbol)]: 100,
                        [Symbol(kHandle)]: null,
                        [Symbol(lastWriteQueueSize)]: 0,
                        [Symbol(timeout)]: null,
                        [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                        [Symbol(kBufferGen)]: null,
                        [Symbol(kCapture)]: false,
                        [Symbol(kSetNoDelay)]: false,
                        [Symbol(kSetKeepAlive)]: true,
                        [Symbol(kSetKeepAliveInitialDelay)]: 60,
                        [Symbol(kBytesRead)]: 1467,
                        [Symbol(kBytesWritten)]: 62339,
                        [Symbol(connect-options)]: {
                          rejectUnauthorized: true,
                          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                          checkServerIdentity: [Function: checkServerIdentity],
                          minDHSize: 1024,
                          maxRedirects: 21,
                          maxBodyLength: Infinity,
                          protocol: 'https:',
                          path: null,
                          method: 'POST',
                          headers: [Object: null prototype] {
                            Accept: 'application/json, text/plain, */*',
                            'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                            'User-Agent': 'axios/1.3.4',
                            'Content-Length': '61912',
                            'Accept-Encoding': 'gzip, compress, deflate, br'
                          },
                          agents: { http: undefined, https: undefined },
                          auth: undefined,
                          beforeRedirect: [Function: dispatchBeforeRedirect],
                          beforeRedirects: { proxy: [Function: beforeRedirect] },
                          hostname: 'discordapp.com',
                          port: 443,
                          agent: undefined,
                          nativeProtocols: [Circular *4],
                          pathname: '/api/channels/1067968693017002047/messages',
                          _defaultAgent: [Circular *3],
                          host: 'discordapp.com',
                          noDelay: true,
                          servername: 'discordapp.com',
                          _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                          encoding: null,
                          singleUse: true
                        }
                      }
                    ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                Server: [Function: Server],
                createServer: [Function: createServer],
                get: [Function: get],
                request: [Function: request]
              }
            },
            pathname: '/api/channels/1067968693017002047/messages'
          },
          _ended: true,
          _ending: true,
          _redirectCount: 0,
          _redirects: [],
          _requestBodyLength: 61912,
          _requestBodyBuffers: [],
          _onNativeResponse: [Function (anonymous)],
          _currentRequest: [Circular *1],
          _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          [Symbol(kCapture)]: false
        },
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kEndCalled)]: true,
        [Symbol(kNeedDrain)]: true,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          accept: [ 'Accept', 'application/json, text/plain, */*' ],
          'content-type': [
            'Content-Type',
            'multipart/form-data; boundary=--------------------------699555523360101632895644'
          ],
          authorization: [
            'authorization',
            'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
          ],
          'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
          'content-length': [ 'Content-Length', '61912' ],
          'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
          host: [ 'Host', 'discordapp.com' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kUniqueHeaders)]: null
      },
      response: {
        status: 400,
        statusText: 'Bad Request',
        headers: AxiosHeaders {
          date: 'Fri, 17 Mar 2023 01:39:57 GMT',
          'content-type': 'application/json',
          'content-length': '22',
          connection: 'close',
          'set-cookie': [
            '__dcfduid=9fe357e4c46411ed91c64afca57b4dfb; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__sdcfduid=9fe357e4c46411ed91c64afca57b4dfb82b9b0ae39c66da41821d8f84a539995feb2ff323b9283890684f1c4bc8d4c48; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
            '__cf_bm=cj1FO1KhwRVsH6_5EW.EJFtRT8wi8SdGm3puq2a2bu8-1679017197-0-AQMx1WQCUpH1gSQ6AVlbJMiohRXy+zHF81WhzJiPSgClI8TWvqpaV4Vp0ZWkxoOSPnay5iDXLLtzdBeNDBPUTyc=; path=/; expires=Fri, 17-Mar-23 02:09:57 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
          ],
          'strict-transport-security': 'max-age=31536000; includeSubDomains',
          'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
          'x-ratelimit-limit': '5',
          'x-ratelimit-remaining': '4',
          'x-ratelimit-reset': '1679017199',
          'x-ratelimit-reset-after': '1',
          via: '1.1 google',
          'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
          'cf-cache-status': 'DYNAMIC',
          'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YvEdHqKaK4QWSqIyZEeYlwB3vPfo%2BzWr3GNhf%2FZxTIyERJEMN3qfErvHqG7gUdq9WJsFBumR9%2B3JyChctY8I9S%2FcFoJP5zbfTY1ywIDSERfGDGZMsU6yEKru%2B42kNrwv"}],"group":"cf-nel","max_age":604800}',
          nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
          server: 'cloudflare',
          'cf-ray': '7a91866c3df13559-CNF'
        },
        config: {
          transitional: {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          },
          adapter: [ 'xhr', 'http' ],
          transformRequest: [ [Function: transformRequest] ],
          transformResponse: [ [Function: transformResponse] ],
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: [Function: FormData] {
              LINE_BREAK: '\r\n',
              DEFAULT_CONTENT_TYPE: 'application/octet-stream'
            },
            Blob: [class Blob]
          },
          validateStatus: [Function: validateStatus],
          headers: AxiosHeaders {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
            authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
            'User-Agent': 'axios/1.3.4',
            'Content-Length': '61912',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          method: 'post',
          url: 'https://discordapp.com/api/channels/1067968693017002047/messages',
          data: FormData {
            _overheadLength: 150,
            _valueLength: 61706,
            _valuesToMeasure: [],
            writable: false,
            readable: true,
            dataSize: 0,
            maxDataSize: 2097152,
            pauseStreams: true,
            _released: true,
            _streams: [],
            _currentStream: null,
            _insideLoop: false,
            _pendingNext: false,
            _boundary: '--------------------------699555523360101632895644',
            _events: [Object: null prototype] {
              end: [Function (anonymous)],
              error: [Function: bound onceWrapper] {
                listener: [Function (anonymous)]
              },
              close: [Function (anonymous)]
            },
            _eventsCount: 3
          }
        },
        request: <ref *1> ClientRequest {
          _events: [Object: null prototype] {
            abort: [Function (anonymous)],
            aborted: [Function (anonymous)],
            connect: [Function (anonymous)],
            error: [Function (anonymous)],
            socket: [Function (anonymous)],
            timeout: [Function (anonymous)],
            finish: [Function: requestOnFinish]
          },
          _eventsCount: 7,
          _maxListeners: undefined,
          outputData: [],
          outputSize: 0,
          writable: true,
          destroyed: false,
          _last: true,
          chunkedEncoding: false,
          shouldKeepAlive: false,
          maxRequestsOnConnectionReached: false,
          _defaultKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: false,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          strictContentLength: false,
          _contentLength: '61912',
          _hasBody: true,
          _trailer: '',
          finished: true,
          _headerSent: true,
          _closed: false,
          socket: <ref *2> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext { context: SecureContext {} },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'discordapp.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                [Function: onSocketCloseDestroySSL],
                [Function: bound onceWrapper] {
                  listener: [Function (anonymous)]
                },
                [Function: onClose],
                [Function: socketCloseListener]
              ],
              end: [Function: onReadableStreamEnd],
              newListener: [Function: keylogNewListener],
              secure: [Function: onConnectSecure],
              session: [Function (anonymous)],
              free: [Function: onFree],
              timeout: [Function: onTimeout],
              agentRemove: [Function: onRemove],
              error: [Function: socketErrorListener]
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'discordapp.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              constructed: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: false,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _maxListeners: undefined,
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: true,
              needDrain: false,
              ending: true,
              ended: true,
              finished: true,
              destroyed: true,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: false,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: true,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              [Symbol(kOnFinished)]: []
            },
            allowHalfOpen: false,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: null,
            _requestCert: true,
            _rejectUnauthorized: true,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *2],
                [Symbol(handle_onclose)]: [Function: done]
              },
              _parentWrap: undefined,
              _secureContext: SecureContext { context: SecureContext {} },
              reading: true,
              onkeylog: [Function: onkeylog],
              onhandshakestart: {},
              onhandshakedone: [Function (anonymous)],
              onocspresponse: [Function: onocspresponse],
              onnewsession: [Function: onnewsessionclient],
              onerror: [Function: onerror],
              [Symbol(owner_symbol)]: [Circular *2]
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: 100,
            [Symbol(kHandle)]: null,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 1467,
            [Symbol(kBytesWritten)]: 62339,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: [Function: checkServerIdentity],
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: 443,
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages',
              _defaultAgent: <ref *3> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)],
                  newListener: [Function: maybeEnableKeylog]
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] { noDelay: true, path: null },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {
                  'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                },
                freeSockets: [Object: null prototype] {},
                keepAliveMsecs: 1000,
                keepAlive: false,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                  },
                  list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                },
                [Symbol(kCapture)]: false
              },
              host: 'discordapp.com',
              noDelay: true,
              servername: 'discordapp.com',
              _agentKey: 'discordapp.com:443:::::::::::::::::::::',
              encoding: null,
              singleUse: true
            }
          },
          _header: 'POST /api/channels/1067968693017002047/messages HTTP/1.1\r\n' +
            'Accept: application/json, text/plain, */*\r\n' +
            'Content-Type: multipart/form-data; boundary=--------------------------699555523360101632895644\r\n' +
            'authorization: Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg\r\n' +
            'User-Agent: axios/1.3.4\r\n' +
            'Content-Length: 61912\r\n' +
            'Accept-Encoding: gzip, compress, deflate, br\r\n' +
            'Host: discordapp.com\r\n' +
            'Connection: close\r\n' +
            '\r\n',
          _keepAliveTimeout: 0,
          _onPendingData: [Function: nop],
          agent: <ref *3> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] { noDelay: true, path: null },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {
              'discordapp.com:443:::::::::::::::::::::': [
                <ref *2> TLSSocket {
                  _tlsOptions: {
                    allowHalfOpen: undefined,
                    pipe: false,
                    secureContext: SecureContext { context: SecureContext {} },
                    isServer: false,
                    requestCert: true,
                    rejectUnauthorized: true,
                    session: undefined,
                    ALPNProtocols: undefined,
                    requestOCSP: undefined,
                    enableTrace: undefined,
                    pskCallback: undefined,
                    highWaterMark: undefined,
                    onread: undefined,
                    signal: undefined
                  },
                  _secureEstablished: true,
                  _securePending: false,
                  _newSessionPending: false,
                  _controlReleased: true,
                  secureConnecting: false,
                  _SNICallback: null,
                  servername: 'discordapp.com',
                  alpnProtocol: false,
                  authorized: true,
                  authorizationError: null,
                  encrypted: true,
                  _events: [Object: null prototype] {
                    close: [
                      [Function: onSocketCloseDestroySSL],
                      [Function: bound onceWrapper] {
                        listener: [Function (anonymous)]
                      },
                      [Function: onClose],
                      [Function: socketCloseListener]
                    ],
                    end: [Function: onReadableStreamEnd],
                    newListener: [Function: keylogNewListener],
                    secure: [Function: onConnectSecure],
                    session: [Function (anonymous)],
                    free: [Function: onFree],
                    timeout: [Function: onTimeout],
                    agentRemove: [Function: onRemove],
                    error: [Function: socketErrorListener]
                  },
                  _eventsCount: 9,
                  connecting: false,
                  _hadError: false,
                  _parent: null,
                  _host: 'discordapp.com',
                  _closeAfterHandlingError: false,
                  _readableState: ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: [],
                    flowing: true,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    constructed: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    destroyed: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    defaultEncoding: 'utf8',
                    awaitDrainWriters: null,
                    multiAwaitDrain: false,
                    readingMore: false,
                    dataEmitted: true,
                    decoder: null,
                    encoding: null,
                    [Symbol(kPaused)]: false
                  },
                  _maxListeners: undefined,
                  _writableState: WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    finalCalled: true,
                    needDrain: false,
                    ending: true,
                    ended: true,
                    finished: true,
                    destroyed: true,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: false,
                    bufferProcessing: false,
                    onwrite: [Function: bound onwrite],
                    writecb: null,
                    writelen: 0,
                    afterWriteTickInfo: null,
                    buffered: [],
                    bufferedIndex: 0,
                    allBuffers: true,
                    allNoop: true,
                    pendingcb: 0,
                    constructed: true,
                    prefinished: true,
                    errorEmitted: false,
                    emitClose: false,
                    autoDestroy: true,
                    errored: null,
                    closed: true,
                    closeEmitted: true,
                    [Symbol(kOnFinished)]: []
                  },
                  allowHalfOpen: false,
                  _sockname: null,
                  _pendingData: null,
                  _pendingEncoding: '',
                  server: undefined,
                  _server: null,
                  ssl: null,
                  _requestCert: true,
                  _rejectUnauthorized: true,
                  parser: null,
                  _httpMessage: [Circular *1],
                  [Symbol(res)]: TLSWrap {
                    _parent: TCP {
                      reading: [Getter/Setter],
                      onconnection: null,
                      [Symbol(owner_symbol)]: [Circular *2],
                      [Symbol(handle_onclose)]: [Function: done]
                    },
                    _parentWrap: undefined,
                    _secureContext: SecureContext { context: SecureContext {} },
                    reading: true,
                    onkeylog: [Function: onkeylog],
                    onhandshakestart: {},
                    onhandshakedone: [Function (anonymous)],
                    onocspresponse: [Function: onocspresponse],
                    onnewsession: [Function: onnewsessionclient],
                    onerror: [Function: onerror],
                    [Symbol(owner_symbol)]: [Circular *2]
                  },
                  [Symbol(verified)]: true,
                  [Symbol(pendingSession)]: null,
                  [Symbol(async_id_symbol)]: 100,
                  [Symbol(kHandle)]: null,
                  [Symbol(lastWriteQueueSize)]: 0,
                  [Symbol(timeout)]: null,
                  [Symbol(kBuffer)]: null,
                  [Symbol(kBufferCb)]: null,
                  [Symbol(kBufferGen)]: null,
                  [Symbol(kCapture)]: false,
                  [Symbol(kSetNoDelay)]: false,
                  [Symbol(kSetKeepAlive)]: true,
                  [Symbol(kSetKeepAliveInitialDelay)]: 60,
                  [Symbol(kBytesRead)]: 1467,
                  [Symbol(kBytesWritten)]: 62339,
                  [Symbol(connect-options)]: {
                    rejectUnauthorized: true,
                    ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                    checkServerIdentity: [Function: checkServerIdentity],
                    minDHSize: 1024,
                    maxRedirects: 21,
                    maxBodyLength: Infinity,
                    protocol: 'https:',
                    path: null,
                    method: 'POST',
                    headers: [Object: null prototype] {
                      Accept: 'application/json, text/plain, */*',
                      'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                      authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                      'User-Agent': 'axios/1.3.4',
                      'Content-Length': '61912',
                      'Accept-Encoding': 'gzip, compress, deflate, br'
                    },
                    agents: { http: undefined, https: undefined },
                    auth: undefined,
                    beforeRedirect: [Function: dispatchBeforeRedirect],
                    beforeRedirects: { proxy: [Function: beforeRedirect] },
                    hostname: 'discordapp.com',
                    port: 443,
                    agent: undefined,
                    nativeProtocols: <ref *4> {
                      'http:': {
                        _connectionListener: [Function: connectionListener],
                        METHODS: [
                          'ACL',         'BIND',       'CHECKOUT',
                          'CONNECT',     'COPY',       'DELETE',
                          'GET',         'HEAD',       'LINK',
                          'LOCK',        'M-SEARCH',   'MERGE',
                          'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                          'MOVE',        'NOTIFY',     'OPTIONS',
                          'PATCH',       'POST',       'PROPFIND',
                          'PROPPATCH',   'PURGE',      'PUT',
                          'REBIND',      'REPORT',     'SEARCH',
                          'SOURCE',      'SUBSCRIBE',  'TRACE',
                          'UNBIND',      'UNLINK',     'UNLOCK',
                          'UNSUBSCRIBE'
                        ],
                        STATUS_CODES: {
                          '100': 'Continue',
                          '101': 'Switching Protocols',
                          '102': 'Processing',
                          '103': 'Early Hints',
                          '200': 'OK',
                          '201': 'Created',
                          '202': 'Accepted',
                          '203': 'Non-Authoritative Information',
                          '204': 'No Content',
                          '205': 'Reset Content',
                          '206': 'Partial Content',
                          '207': 'Multi-Status',
                          '208': 'Already Reported',
                          '226': 'IM Used',
                          '300': 'Multiple Choices',
                          '301': 'Moved Permanently',
                          '302': 'Found',
                          '303': 'See Other',
                          '304': 'Not Modified',
                          '305': 'Use Proxy',
                          '307': 'Temporary Redirect',
                          '308': 'Permanent Redirect',
                          '400': 'Bad Request',
                          '401': 'Unauthorized',
                          '402': 'Payment Required',
                          '403': 'Forbidden',
                          '404': 'Not Found',
                          '405': 'Method Not Allowed',
                          '406': 'Not Acceptable',
                          '407': 'Proxy Authentication Required',
                          '408': 'Request Timeout',
                          '409': 'Conflict',
                          '410': 'Gone',
                          '411': 'Length Required',
                          '412': 'Precondition Failed',
                          '413': 'Payload Too Large',
                          '414': 'URI Too Long',
                          '415': 'Unsupported Media Type',
                          '416': 'Range Not Satisfiable',
                          '417': 'Expectation Failed',
                          '418': "I'm a Teapot",
                          '421': 'Misdirected Request',
                          '422': 'Unprocessable Entity',
                          '423': 'Locked',
                          '424': 'Failed Dependency',
                          '425': 'Too Early',
                          '426': 'Upgrade Required',
                          '428': 'Precondition Required',
                          '429': 'Too Many Requests',
                          '431': 'Request Header Fields Too Large',
                          '451': 'Unavailable For Legal Reasons',
                          '500': 'Internal Server Error',
                          '501': 'Not Implemented',
                          '502': 'Bad Gateway',
                          '503': 'Service Unavailable',
                          '504': 'Gateway Timeout',
                          '505': 'HTTP Version Not Supported',
                          '506': 'Variant Also Negotiates',
                          '507': 'Insufficient Storage',
                          '508': 'Loop Detected',
                          '509': 'Bandwidth Limit Exceeded',
                          '510': 'Not Extended',
                          '511': 'Network Authentication Required'
                        },
                        Agent: [Function: Agent] {
                          defaultMaxSockets: Infinity
                        },
                        ClientRequest: [Function: ClientRequest],
                        IncomingMessage: [Function: IncomingMessage],
                        OutgoingMessage: [Function: OutgoingMessage],
                        Server: [Function: Server],
                        ServerResponse: [Function: ServerResponse],
                        createServer: [Function: createServer],
                        validateHeaderName: [Function: __node_internal_],
                        validateHeaderValue: [Function: __node_internal_],
                        get: [Function: get],
                        request: [Function: request],
                        setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                        maxHeaderSize: [Getter],
                        globalAgent: [Getter/Setter]
                      },
                      'https:': {
                        Agent: [Function: Agent],
                        globalAgent: [Circular *3],
                        Server: [Function: Server],
                        createServer: [Function: createServer],
                        get: [Function: get],
                        request: [Function: request]
                      }
                    },
                    pathname: '/api/channels/1067968693017002047/messages',
                    _defaultAgent: [Circular *3],
                    host: 'discordapp.com',
                    noDelay: true,
                    servername: 'discordapp.com',
                    _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                    encoding: null,
                    singleUse: true
                  }
                }
              ]
            },
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: false,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
              },
              list: [ 'discordapp.com:443:::::::::::::::::::::' ]
            },
            [Symbol(kCapture)]: false
          },
          socketPath: undefined,
          method: 'POST',
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          joinDuplicateHeaders: undefined,
          path: '/api/channels/1067968693017002047/messages',
          _ended: true,
          res: IncomingMessage {
            _readableState: ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: [],
              flowing: true,
              ended: true,
              endEmitted: true,
              reading: false,
              constructed: true,
              sync: true,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              destroyed: true,
              errored: null,
              closed: true,
              closeEmitted: true,
              defaultEncoding: 'utf8',
              awaitDrainWriters: null,
              multiAwaitDrain: false,
              readingMore: true,
              dataEmitted: true,
              decoder: null,
              encoding: null,
              [Symbol(kPaused)]: false
            },
            _events: [Object: null prototype] {
              end: [
                [Function: responseOnEnd],
                [Function: handleStreamEnd]
              ],
              error: [Function: handleStreamError],
              data: [Function: handleStreamData],
              aborted: [Function: handlerStreamAborted]
            },
            _eventsCount: 4,
            _maxListeners: undefined,
            socket: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 100,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1467,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            rawHeaders: [
              'Date',
              'Fri, 17 Mar 2023 01:39:57 GMT',
              'Content-Type',
              'application/json',
              'Content-Length',
              '22',
              'Connection',
              'close',
              'set-cookie',
              '__dcfduid=9fe357e4c46411ed91c64afca57b4dfb; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'strict-transport-security',
              'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket',
              '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit',
              '5',
              'x-ratelimit-remaining',
              '4',
              'x-ratelimit-reset',
              '1679017199',
              'x-ratelimit-reset-after',
              '1',
              'Via',
              '1.1 google',
              'Alt-Svc',
              'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'CF-Cache-Status',
              'DYNAMIC',
              'Set-Cookie',
              '__sdcfduid=9fe357e4c46411ed91c64afca57b4dfb82b9b0ae39c66da41821d8f84a539995feb2ff323b9283890684f1c4bc8d4c48; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
              'Set-Cookie',
              '__cf_bm=cj1FO1KhwRVsH6_5EW.EJFtRT8wi8SdGm3puq2a2bu8-1679017197-0-AQMx1WQCUpH1gSQ6AVlbJMiohRXy+zHF81WhzJiPSgClI8TWvqpaV4Vp0ZWkxoOSPnay5iDXLLtzdBeNDBPUTyc=; path=/; expires=Fri, 17-Mar-23 02:09:57 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None',
              'Report-To',
              '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YvEdHqKaK4QWSqIyZEeYlwB3vPfo%2BzWr3GNhf%2FZxTIyERJEMN3qfErvHqG7gUdq9WJsFBumR9%2B3JyChctY8I9S%2FcFoJP5zbfTY1ywIDSERfGDGZMsU6yEKru%2B42kNrwv"}],"group":"cf-nel","max_age":604800}',
              'NEL',
              '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              'Server',
              'cloudflare',
              'CF-RAY',
              '7a91866c3df13559-CNF'
            ],
            rawTrailers: [],
            joinDuplicateHeaders: undefined,
            aborted: false,
            upgrade: false,
            url: '',
            method: null,
            statusCode: 400,
            statusMessage: 'Bad Request',
            client: <ref *2> TLSSocket {
              _tlsOptions: {
                allowHalfOpen: undefined,
                pipe: false,
                secureContext: SecureContext { context: SecureContext {} },
                isServer: false,
                requestCert: true,
                rejectUnauthorized: true,
                session: undefined,
                ALPNProtocols: undefined,
                requestOCSP: undefined,
                enableTrace: undefined,
                pskCallback: undefined,
                highWaterMark: undefined,
                onread: undefined,
                signal: undefined
              },
              _secureEstablished: true,
              _securePending: false,
              _newSessionPending: false,
              _controlReleased: true,
              secureConnecting: false,
              _SNICallback: null,
              servername: 'discordapp.com',
              alpnProtocol: false,
              authorized: true,
              authorizationError: null,
              encrypted: true,
              _events: [Object: null prototype] {
                close: [
                  [Function: onSocketCloseDestroySSL],
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: onClose],
                  [Function: socketCloseListener]
                ],
                end: [Function: onReadableStreamEnd],
                newListener: [Function: keylogNewListener],
                secure: [Function: onConnectSecure],
                session: [Function (anonymous)],
                free: [Function: onFree],
                timeout: [Function: onTimeout],
                agentRemove: [Function: onRemove],
                error: [Function: socketErrorListener]
              },
              _eventsCount: 9,
              connecting: false,
              _hadError: false,
              _parent: null,
              _host: 'discordapp.com',
              _closeAfterHandlingError: false,
              _readableState: ReadableState {
                objectMode: false,
                highWaterMark: 16384,
                buffer: BufferList { head: null, tail: null, length: 0 },
                length: 0,
                pipes: [],
                flowing: true,
                ended: false,
                endEmitted: false,
                reading: true,
                constructed: true,
                sync: false,
                needReadable: true,
                emittedReadable: false,
                readableListening: false,
                resumeScheduled: false,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                destroyed: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                defaultEncoding: 'utf8',
                awaitDrainWriters: null,
                multiAwaitDrain: false,
                readingMore: false,
                dataEmitted: true,
                decoder: null,
                encoding: null,
                [Symbol(kPaused)]: false
              },
              _maxListeners: undefined,
              _writableState: WritableState {
                objectMode: false,
                highWaterMark: 16384,
                finalCalled: true,
                needDrain: false,
                ending: true,
                ended: true,
                finished: true,
                destroyed: true,
                decodeStrings: false,
                defaultEncoding: 'utf8',
                length: 0,
                writing: false,
                corked: 0,
                sync: false,
                bufferProcessing: false,
                onwrite: [Function: bound onwrite],
                writecb: null,
                writelen: 0,
                afterWriteTickInfo: null,
                buffered: [],
                bufferedIndex: 0,
                allBuffers: true,
                allNoop: true,
                pendingcb: 0,
                constructed: true,
                prefinished: true,
                errorEmitted: false,
                emitClose: false,
                autoDestroy: true,
                errored: null,
                closed: true,
                closeEmitted: true,
                [Symbol(kOnFinished)]: []
              },
              allowHalfOpen: false,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: undefined,
              _server: null,
              ssl: null,
              _requestCert: true,
              _rejectUnauthorized: true,
              parser: null,
              _httpMessage: [Circular *1],
              [Symbol(res)]: TLSWrap {
                _parent: TCP {
                  reading: [Getter/Setter],
                  onconnection: null,
                  [Symbol(owner_symbol)]: [Circular *2],
                  [Symbol(handle_onclose)]: [Function: done]
                },
                _parentWrap: undefined,
                _secureContext: SecureContext { context: SecureContext {} },
                reading: true,
                onkeylog: [Function: onkeylog],
                onhandshakestart: {},
                onhandshakedone: [Function (anonymous)],
                onocspresponse: [Function: onocspresponse],
                onnewsession: [Function: onnewsessionclient],
                onerror: [Function: onerror],
                [Symbol(owner_symbol)]: [Circular *2]
              },
              [Symbol(verified)]: true,
              [Symbol(pendingSession)]: null,
              [Symbol(async_id_symbol)]: 100,
              [Symbol(kHandle)]: null,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]: null,
              [Symbol(kBuffer)]: null,
              [Symbol(kBufferCb)]: null,
              [Symbol(kBufferGen)]: null,
              [Symbol(kCapture)]: false,
              [Symbol(kSetNoDelay)]: false,
              [Symbol(kSetKeepAlive)]: true,
              [Symbol(kSetKeepAliveInitialDelay)]: 60,
              [Symbol(kBytesRead)]: 1467,
              [Symbol(kBytesWritten)]: 62339,
              [Symbol(connect-options)]: {
                rejectUnauthorized: true,
                ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                checkServerIdentity: [Function: checkServerIdentity],
                minDHSize: 1024,
                maxRedirects: 21,
                maxBodyLength: Infinity,
                protocol: 'https:',
                path: null,
                method: 'POST',
                headers: [Object: null prototype] {
                  Accept: 'application/json, text/plain, */*',
                  'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                  authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                  'User-Agent': 'axios/1.3.4',
                  'Content-Length': '61912',
                  'Accept-Encoding': 'gzip, compress, deflate, br'
                },
                agents: { http: undefined, https: undefined },
                auth: undefined,
                beforeRedirect: [Function: dispatchBeforeRedirect],
                beforeRedirects: { proxy: [Function: beforeRedirect] },
                hostname: 'discordapp.com',
                port: 443,
                agent: undefined,
                nativeProtocols: <ref *4> {
                  'http:': {
                    _connectionListener: [Function: connectionListener],
                    METHODS: [
                      'ACL',         'BIND',       'CHECKOUT',
                      'CONNECT',     'COPY',       'DELETE',
                      'GET',         'HEAD',       'LINK',
                      'LOCK',        'M-SEARCH',   'MERGE',
                      'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                      'MOVE',        'NOTIFY',     'OPTIONS',
                      'PATCH',       'POST',       'PROPFIND',
                      'PROPPATCH',   'PURGE',      'PUT',
                      'REBIND',      'REPORT',     'SEARCH',
                      'SOURCE',      'SUBSCRIBE',  'TRACE',
                      'UNBIND',      'UNLINK',     'UNLOCK',
                      'UNSUBSCRIBE'
                    ],
                    STATUS_CODES: {
                      '100': 'Continue',
                      '101': 'Switching Protocols',
                      '102': 'Processing',
                      '103': 'Early Hints',
                      '200': 'OK',
                      '201': 'Created',
                      '202': 'Accepted',
                      '203': 'Non-Authoritative Information',
                      '204': 'No Content',
                      '205': 'Reset Content',
                      '206': 'Partial Content',
                      '207': 'Multi-Status',
                      '208': 'Already Reported',
                      '226': 'IM Used',
                      '300': 'Multiple Choices',
                      '301': 'Moved Permanently',
                      '302': 'Found',
                      '303': 'See Other',
                      '304': 'Not Modified',
                      '305': 'Use Proxy',
                      '307': 'Temporary Redirect',
                      '308': 'Permanent Redirect',
                      '400': 'Bad Request',
                      '401': 'Unauthorized',
                      '402': 'Payment Required',
                      '403': 'Forbidden',
                      '404': 'Not Found',
                      '405': 'Method Not Allowed',
                      '406': 'Not Acceptable',
                      '407': 'Proxy Authentication Required',
                      '408': 'Request Timeout',
                      '409': 'Conflict',
                      '410': 'Gone',
                      '411': 'Length Required',
                      '412': 'Precondition Failed',
                      '413': 'Payload Too Large',
                      '414': 'URI Too Long',
                      '415': 'Unsupported Media Type',
                      '416': 'Range Not Satisfiable',
                      '417': 'Expectation Failed',
                      '418': "I'm a Teapot",
                      '421': 'Misdirected Request',
                      '422': 'Unprocessable Entity',
                      '423': 'Locked',
                      '424': 'Failed Dependency',
                      '425': 'Too Early',
                      '426': 'Upgrade Required',
                      '428': 'Precondition Required',
                      '429': 'Too Many Requests',
                      '431': 'Request Header Fields Too Large',
                      '451': 'Unavailable For Legal Reasons',
                      '500': 'Internal Server Error',
                      '501': 'Not Implemented',
                      '502': 'Bad Gateway',
                      '503': 'Service Unavailable',
                      '504': 'Gateway Timeout',
                      '505': 'HTTP Version Not Supported',
                      '506': 'Variant Also Negotiates',
                      '507': 'Insufficient Storage',
                      '508': 'Loop Detected',
                      '509': 'Bandwidth Limit Exceeded',
                      '510': 'Not Extended',
                      '511': 'Network Authentication Required'
                    },
                    Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                    ClientRequest: [Function: ClientRequest],
                    IncomingMessage: [Function: IncomingMessage],
                    OutgoingMessage: [Function: OutgoingMessage],
                    Server: [Function: Server],
                    ServerResponse: [Function: ServerResponse],
                    createServer: [Function: createServer],
                    validateHeaderName: [Function: __node_internal_],
                    validateHeaderValue: [Function: __node_internal_],
                    get: [Function: get],
                    request: [Function: request],
                    setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                    maxHeaderSize: [Getter],
                    globalAgent: [Getter/Setter]
                  },
                  'https:': {
                    Agent: [Function: Agent],
                    globalAgent: <ref *3> Agent {
                      _events: [Object: null prototype] {
                        free: [Function (anonymous)],
                        newListener: [Function: maybeEnableKeylog]
                      },
                      _eventsCount: 2,
                      _maxListeners: undefined,
                      defaultPort: 443,
                      protocol: 'https:',
                      options: [Object: null prototype] {
                        noDelay: true,
                        path: null
                      },
                      requests: [Object: null prototype] {},
                      sockets: [Object: null prototype] {
                        'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                      },
                      freeSockets: [Object: null prototype] {},
                      keepAliveMsecs: 1000,
                      keepAlive: false,
                      maxSockets: Infinity,
                      maxFreeSockets: 256,
                      scheduling: 'lifo',
                      maxTotalSockets: Infinity,
                      totalSocketCount: 1,
                      maxCachedSessions: 100,
                      _sessionCache: {
                        map: {
                          'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                        },
                        list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                      },
                      [Symbol(kCapture)]: false
                    },
                    Server: [Function: Server],
                    createServer: [Function: createServer],
                    get: [Function: get],
                    request: [Function: request]
                  }
                },
                pathname: '/api/channels/1067968693017002047/messages',
                _defaultAgent: <ref *3> Agent {
                  _events: [Object: null prototype] {
                    free: [Function (anonymous)],
                    newListener: [Function: maybeEnableKeylog]
                  },
                  _eventsCount: 2,
                  _maxListeners: undefined,
                  defaultPort: 443,
                  protocol: 'https:',
                  options: [Object: null prototype] {
                    noDelay: true,
                    path: null
                  },
                  requests: [Object: null prototype] {},
                  sockets: [Object: null prototype] {
                    'discordapp.com:443:::::::::::::::::::::': [ [Circular *2] ]
                  },
                  freeSockets: [Object: null prototype] {},
                  keepAliveMsecs: 1000,
                  keepAlive: false,
                  maxSockets: Infinity,
                  maxFreeSockets: 256,
                  scheduling: 'lifo',
                  maxTotalSockets: Infinity,
                  totalSocketCount: 1,
                  maxCachedSessions: 100,
                  _sessionCache: {
                    map: {
                      'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                    },
                    list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                  },
                  [Symbol(kCapture)]: false
                },
                host: 'discordapp.com',
                noDelay: true,
                servername: 'discordapp.com',
                _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                encoding: null,
                singleUse: true
              }
            },
            _consuming: false,
            _dumped: false,
            req: [Circular *1],
            responseUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            redirects: [],
            [Symbol(kCapture)]: false,
            [Symbol(kHeaders)]: {
              date: 'Fri, 17 Mar 2023 01:39:57 GMT',
              'content-type': 'application/json',
              'content-length': '22',
              connection: 'close',
              'set-cookie': [
                '__dcfduid=9fe357e4c46411ed91c64afca57b4dfb; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__sdcfduid=9fe357e4c46411ed91c64afca57b4dfb82b9b0ae39c66da41821d8f84a539995feb2ff323b9283890684f1c4bc8d4c48; Expires=Wed, 15-Mar-2028 01:39:57 GMT; Max-Age=157680000; Secure; HttpOnly; Path=/',
                '__cf_bm=cj1FO1KhwRVsH6_5EW.EJFtRT8wi8SdGm3puq2a2bu8-1679017197-0-AQMx1WQCUpH1gSQ6AVlbJMiohRXy+zHF81WhzJiPSgClI8TWvqpaV4Vp0ZWkxoOSPnay5iDXLLtzdBeNDBPUTyc=; path=/; expires=Fri, 17-Mar-23 02:09:57 GMT; domain=.discordapp.com; HttpOnly; Secure; SameSite=None'
              ],
              'strict-transport-security': 'max-age=31536000; includeSubDomains',
              'x-ratelimit-bucket': '1d3c67957bcdccc6709861c232df8529',
              'x-ratelimit-limit': '5',
              'x-ratelimit-remaining': '4',
              'x-ratelimit-reset': '1679017199',
              'x-ratelimit-reset-after': '1',
              via: '1.1 google',
              'alt-svc': 'h3=":443"; ma=86400, h3-29=":443"; ma=86400',
              'cf-cache-status': 'DYNAMIC',
              'report-to': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=YvEdHqKaK4QWSqIyZEeYlwB3vPfo%2BzWr3GNhf%2FZxTIyERJEMN3qfErvHqG7gUdq9WJsFBumR9%2B3JyChctY8I9S%2FcFoJP5zbfTY1ywIDSERfGDGZMsU6yEKru%2B42kNrwv"}],"group":"cf-nel","max_age":604800}',
              nel: '{"success_fraction":0,"report_to":"cf-nel","max_age":604800}',
              server: 'cloudflare',
              'cf-ray': '7a91866c3df13559-CNF'
            },
            [Symbol(kHeadersCount)]: 40,
            [Symbol(kTrailers)]: null,
            [Symbol(kTrailersCount)]: 0
          },
          aborted: false,
          timeoutCb: null,
          upgradeOrConnect: false,
          parser: null,
          maxHeadersCount: null,
          reusedSocket: false,
          host: 'discordapp.com',
          protocol: 'https:',
          _redirectable: Writable {
            _writableState: WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: true,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              afterWriteTickInfo: null,
              buffered: [],
              bufferedIndex: 0,
              allBuffers: true,
              allNoop: true,
              pendingcb: 0,
              constructed: true,
              prefinished: false,
              errorEmitted: false,
              emitClose: true,
              autoDestroy: true,
              errored: null,
              closed: false,
              closeEmitted: false,
              [Symbol(kOnFinished)]: []
            },
            _events: [Object: null prototype] {
              response: [Function: handleResponse],
              error: [Function: handleRequestError],
              socket: [Function: handleRequestSocket]
            },
            _eventsCount: 3,
            _maxListeners: undefined,
            _options: {
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: '/api/channels/1067968693017002047/messages',
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                'User-Agent': 'axios/1.3.4',
                'Content-Length': '61912',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              beforeRedirect: [Function: dispatchBeforeRedirect],
              beforeRedirects: { proxy: [Function: beforeRedirect] },
              hostname: 'discordapp.com',
              port: '',
              agent: undefined,
              nativeProtocols: <ref *4> {
                'http:': {
                  _connectionListener: [Function: connectionListener],
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE'
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: [Function: Agent] { defaultMaxSockets: Infinity },
                  ClientRequest: [Function: ClientRequest],
                  IncomingMessage: [Function: IncomingMessage],
                  OutgoingMessage: [Function: OutgoingMessage],
                  Server: [Function: Server],
                  ServerResponse: [Function: ServerResponse],
                  createServer: [Function: createServer],
                  validateHeaderName: [Function: __node_internal_],
                  validateHeaderValue: [Function: __node_internal_],
                  get: [Function: get],
                  request: [Function: request],
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: [Function: Agent],
                  globalAgent: <ref *3> Agent {
                    _events: [Object: null prototype] {
                      free: [Function (anonymous)],
                      newListener: [Function: maybeEnableKeylog]
                    },
                    _eventsCount: 2,
                    _maxListeners: undefined,
                    defaultPort: 443,
                    protocol: 'https:',
                    options: [Object: null prototype] {
                      noDelay: true,
                      path: null
                    },
                    requests: [Object: null prototype] {},
                    sockets: [Object: null prototype] {
                      'discordapp.com:443:::::::::::::::::::::': [
                        <ref *2> TLSSocket {
                          _tlsOptions: {
                            allowHalfOpen: undefined,
                            pipe: false,
                            secureContext: SecureContext { context: SecureContext {} },
                            isServer: false,
                            requestCert: true,
                            rejectUnauthorized: true,
                            session: undefined,
                            ALPNProtocols: undefined,
                            requestOCSP: undefined,
                            enableTrace: undefined,
                            pskCallback: undefined,
                            highWaterMark: undefined,
                            onread: undefined,
                            signal: undefined
                          },
                          _secureEstablished: true,
                          _securePending: false,
                          _newSessionPending: false,
                          _controlReleased: true,
                          secureConnecting: false,
                          _SNICallback: null,
                          servername: 'discordapp.com',
                          alpnProtocol: false,
                          authorized: true,
                          authorizationError: null,
                          encrypted: true,
                          _events: [Object: null prototype] {
                            close: [
                              [Function: onSocketCloseDestroySSL],
                              [Function: bound onceWrapper] {
                                listener: [Function (anonymous)]
                              },
                              [Function: onClose],
                              [Function: socketCloseListener]
                            ],
                            end: [Function: onReadableStreamEnd],
                            newListener: [Function: keylogNewListener],
                            secure: [Function: onConnectSecure],
                            session: [Function (anonymous)],
                            free: [Function: onFree],
                            timeout: [Function: onTimeout],
                            agentRemove: [Function: onRemove],
                            error: [Function: socketErrorListener]
                          },
                          _eventsCount: 9,
                          connecting: false,
                          _hadError: false,
                          _parent: null,
                          _host: 'discordapp.com',
                          _closeAfterHandlingError: false,
                          _readableState: ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: [],
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            constructed: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            destroyed: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            defaultEncoding: 'utf8',
                            awaitDrainWriters: null,
                            multiAwaitDrain: false,
                            readingMore: false,
                            dataEmitted: true,
                            decoder: null,
                            encoding: null,
                            [Symbol(kPaused)]: false
                          },
                          _maxListeners: undefined,
                          _writableState: WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: true,
                            destroyed: true,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            afterWriteTickInfo: null,
                            buffered: [],
                            bufferedIndex: 0,
                            allBuffers: true,
                            allNoop: true,
                            pendingcb: 0,
                            constructed: true,
                            prefinished: true,
                            errorEmitted: false,
                            emitClose: false,
                            autoDestroy: true,
                            errored: null,
                            closed: true,
                            closeEmitted: true,
                            [Symbol(kOnFinished)]: []
                          },
                          allowHalfOpen: false,
                          _sockname: null,
                          _pendingData: null,
                          _pendingEncoding: '',
                          server: undefined,
                          _server: null,
                          ssl: null,
                          _requestCert: true,
                          _rejectUnauthorized: true,
                          parser: null,
                          _httpMessage: [Circular *1],
                          [Symbol(res)]: TLSWrap {
                            _parent: TCP {
                              reading: [Getter/Setter],
                              onconnection: null,
                              [Symbol(owner_symbol)]: [Circular *2],
                              [Symbol(handle_onclose)]: [Function: done]
                            },
                            _parentWrap: undefined,
                            _secureContext: SecureContext { context: SecureContext {} },
                            reading: true,
                            onkeylog: [Function: onkeylog],
                            onhandshakestart: {},
                            onhandshakedone: [Function (anonymous)],
                            onocspresponse: [Function: onocspresponse],
                            onnewsession: [Function: onnewsessionclient],
                            onerror: [Function: onerror],
                            [Symbol(owner_symbol)]: [Circular *2]
                          },
                          [Symbol(verified)]: true,
                          [Symbol(pendingSession)]: null,
                          [Symbol(async_id_symbol)]: 100,
                          [Symbol(kHandle)]: null,
                          [Symbol(lastWriteQueueSize)]: 0,
                          [Symbol(timeout)]: null,
                          [Symbol(kBuffer)]: null,
                          [Symbol(kBufferCb)]: null,
                          [Symbol(kBufferGen)]: null,
                          [Symbol(kCapture)]: false,
                          [Symbol(kSetNoDelay)]: false,
                          [Symbol(kSetKeepAlive)]: true,
                          [Symbol(kSetKeepAliveInitialDelay)]: 60,
                          [Symbol(kBytesRead)]: 1467,
                          [Symbol(kBytesWritten)]: 62339,
                          [Symbol(connect-options)]: {
                            rejectUnauthorized: true,
                            ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                            checkServerIdentity: [Function: checkServerIdentity],
                            minDHSize: 1024,
                            maxRedirects: 21,
                            maxBodyLength: Infinity,
                            protocol: 'https:',
                            path: null,
                            method: 'POST',
                            headers: [Object: null prototype] {
                              Accept: 'application/json, text/plain, */*',
                              'Content-Type': 'multipart/form-data; boundary=--------------------------699555523360101632895644',
                              authorization: 'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg',
                              'User-Agent': 'axios/1.3.4',
                              'Content-Length': '61912',
                              'Accept-Encoding': 'gzip, compress, deflate, br'
                            },
                            agents: { http: undefined, https: undefined },
                            auth: undefined,
                            beforeRedirect: [Function: dispatchBeforeRedirect],
                            beforeRedirects: { proxy: [Function: beforeRedirect] },
                            hostname: 'discordapp.com',
                            port: 443,
                            agent: undefined,
                            nativeProtocols: [Circular *4],
                            pathname: '/api/channels/1067968693017002047/messages',
                            _defaultAgent: [Circular *3],
                            host: 'discordapp.com',
                            noDelay: true,
                            servername: 'discordapp.com',
                            _agentKey: 'discordapp.com:443:::::::::::::::::::::',
                            encoding: null,
                            singleUse: true
                          }
                        }
                      ]
                    },
                    freeSockets: [Object: null prototype] {},
                    keepAliveMsecs: 1000,
                    keepAlive: false,
                    maxSockets: Infinity,
                    maxFreeSockets: 256,
                    scheduling: 'lifo',
                    maxTotalSockets: Infinity,
                    totalSocketCount: 1,
                    maxCachedSessions: 100,
                    _sessionCache: {
                      map: {
                        'discordapp.com:443:::::::::::::::::::::': <Buffer 30 82 06 b5 02 01 01 02 02 03 04 04 02 13 02 04 20 db f5 65 00 72 cf 7f 50 4b 6e c1 4c e5 7b b2 c8 06 45 a8 82 74 2e d5 11 5b 60 57 55 d9 9e f3 f1 04 ... 1671 more bytes>
                      },
                      list: [ 'discordapp.com:443:::::::::::::::::::::' ]
                    },
                    [Symbol(kCapture)]: false
                  },
                  Server: [Function: Server],
                  createServer: [Function: createServer],
                  get: [Function: get],
                  request: [Function: request]
                }
              },
              pathname: '/api/channels/1067968693017002047/messages'
            },
            _ended: true,
            _ending: true,
            _redirectCount: 0,
            _redirects: [],
            _requestBodyLength: 61912,
            _requestBodyBuffers: [],
            _onNativeResponse: [Function (anonymous)],
            _currentRequest: [Circular *1],
            _currentUrl: 'https://discordapp.com/api/channels/1067968693017002047/messages',
            [Symbol(kCapture)]: false
          },
          [Symbol(kCapture)]: false,
          [Symbol(kBytesWritten)]: 0,
          [Symbol(kEndCalled)]: true,
          [Symbol(kNeedDrain)]: true,
          [Symbol(corked)]: 0,
          [Symbol(kOutHeaders)]: [Object: null prototype] {
            accept: [ 'Accept', 'application/json, text/plain, */*' ],
            'content-type': [
              'Content-Type',
              'multipart/form-data; boundary=--------------------------699555523360101632895644'
            ],
            authorization: [
              'authorization',
              'Bot MTA3NTU3ODgwNTU3OTY5ODE5Ng.GFhau2.tZ_bHN7HLZkyp88r4x8BhS4A5gIsDQiV1XQyDg'
            ],
            'user-agent': [ 'User-Agent', 'axios/1.3.4' ],
            'content-length': [ 'Content-Length', '61912' ],
            'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
            host: [ 'Host', 'discordapp.com' ]
          },
          [Symbol(errored)]: null,
          [Symbol(kUniqueHeaders)]: null
        },
        data: { attachments: [ '0' ] }
      }
    },
    level: 'error',
    message: 'uncaughtException: Request failed with status code 400\n' +
      'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    stack: 'AxiosError: Request failed with status code 400\n' +
      '    at settle (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js:19:12)\n' +
      '    at IncomingMessage.handleStreamEnd (/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js:556:11)\n' +
      '    at IncomingMessage.emit (node:events:525:35)\n' +
      '    at IncomingMessage.emit (node:domain:489:12)\n' +
      '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
      '    at processTicksAndRejections (node:internal/process/task_queues:82:21)',
    exception: true,
    date: 'Thu Mar 16 2023 22:39:57 GMT-0300 (Brasilia Standard Time)',
    process: {
      pid: 61885,
      uid: 1000,
      gid: 1001,
      cwd: '/home/zizmackrok/Desktop/Code/not-too-powerful/server',
      execPath: '/home/zizmackrok/.nvm/versions/node/v18.15.0/bin/node',
      version: 'v18.15.0',
      argv: [
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/.bin/ts-node',
        '/home/zizmackrok/Desktop/Code/not-too-powerful/server/app.ts'
      ],
      memoryUsage: {
        rss: 346587136,
        heapTotal: 230703104,
        heapUsed: 188423912,
        external: 6921244,
        arrayBuffers: 4180961
      }
    },
    os: { loadavg: [ 0.49, 0.96, 1.26 ], uptime: 46577.59 },
    trace: [
      {
        column: 12,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/core/settle.js',
        function: 'settle',
        line: 19,
        method: null,
        native: false
      },
      {
        column: 11,
        file: '/home/zizmackrok/Desktop/Code/not-too-powerful/server/node_modules/axios/lib/adapters/http.js',
        function: 'IncomingMessage.handleStreamEnd',
        line: 556,
        method: 'handleStreamEnd',
        native: false
      },
      {
        column: 35,
        file: 'node:events',
        function: 'IncomingMessage.emit',
        line: 525,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:domain',
        function: 'IncomingMessage.emit',
        line: 489,
        method: 'emit',
        native: false
      },
      {
        column: 12,
        file: 'node:internal/streams/readable',
        function: 'endReadableNT',
        line: 1359,
        method: null,
        native: false
      },
      {
        column: 21,
        file: 'node:internal/process/task_queues',
        function: 'processTicksAndRejections',
        line: 82,
        method: null,
        native: false
      }
    ],
    req: {
      url: '/api/v1/guilds/sendMessage',
      headers: {
        host: 'localhost:4000',
        'user-agent': 'insomnia/2022.7.5',
        'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY',
        accept: '*/*',
        'content-length': '61900'
      },
      method: 'POST',
      httpVersion: '1.1',
      originalUrl: '/api/v1/guilds/sendMessage',
      query: {}
    }
  },
  level: '\x1B[31merror\x1B[39m',
  message: 'middlewareError',
  timestamp: '2023-03-16 22:39:57:3957'
}
